{"version":3,"file":"impl.app-C4V9PILW.js","names":["updateUrl: UpdateUrlFunction"],"sources":["../src/adapters/next/impl.app.ts"],"sourcesContent":["import { useRouter, useSearchParams } from 'next/navigation.js'\nimport { startTransition, useCallback, useEffect, useOptimistic } from 'react'\nimport { debug } from '../../lib/debug'\nimport { debounceController } from '../../lib/queues/debounce'\nimport { resetQueues } from '../../lib/queues/reset'\nimport { globalThrottleQueue } from '../../lib/queues/throttle'\nimport { renderQueryString } from '../../lib/url-encoding'\nimport type { AdapterInterface, UpdateUrlFunction } from '../lib/defs'\nimport { markHistoryAsPatched, shouldPatchHistory } from '../lib/patch-history'\n\n// See: https://github.com/47ng/nuqs/issues/603#issuecomment-2317057128\n// and https://github.com/47ng/nuqs/discussions/960#discussioncomment-12699171\nconst NUM_HISTORY_CALLS_PER_UPDATE = 3\n\nlet mutex = 0\n\nfunction onPopState() {\n  mutex = 0\n  resetQueues()\n}\n\nfunction onHistoryStateUpdate() {\n  mutex--\n  if (mutex <= 0) {\n    mutex = 0 // Don't let values become too negatively large and wrap around\n    // Doing this after the end of the current render work because of the error:\n    // \"useInsertionEffect cannot schedule updates\"\n    // (resetting the queue causes the useSyncExternalStore of queued queries\n    // to be marked for rendering)\n    // The useInsertionEffect in question is the one in the Next.js app router core\n    //  dealing with history API calls.\n    queueMicrotask(resetQueues)\n  }\n}\n\nfunction patchHistory() {\n  if (!shouldPatchHistory('next/app')) {\n    return\n  }\n  const originalReplaceState = history.replaceState\n  const originalPushState = history.pushState\n  history.replaceState = function nuqs_replaceState(state, title, url) {\n    onHistoryStateUpdate()\n    return originalReplaceState.call(history, state, title, url)\n  }\n  history.pushState = function nuqs_pushState(state, title, url) {\n    onHistoryStateUpdate()\n    return originalPushState.call(history, state, title, url)\n  }\n  markHistoryAsPatched('next/app')\n}\n\n// Detect user navigation (clicking links, router calls)\n// and reset the queues when that happens.\nexport function NavigationSpy() {\n  useEffect(() => {\n    patchHistory()\n    window.addEventListener('popstate', onPopState)\n    return () => window.removeEventListener('popstate', onPopState)\n  }, [])\n  return null\n}\n\nexport function useNuqsNextAppRouterAdapter(): AdapterInterface {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const [optimisticSearchParams, setOptimisticSearchParams] =\n    useOptimistic<URLSearchParams>(searchParams)\n  const updateUrl: UpdateUrlFunction = useCallback((search, options) => {\n    const queuedThrottledKeys = globalThrottleQueue.reset()\n    const resetKeysToSync = queuedThrottledKeys.concat(\n      Array.from(debounceController.queuedQuerySync.all.keys())\n    )\n    startTransition(() => {\n      if (!options.shallow) {\n        setOptimisticSearchParams(search)\n        for (const key of resetKeysToSync) {\n          debounceController.queuedQuerySync.emit(key)\n        }\n      }\n      const url = renderURL(search)\n      debug('[nuqs next/app] Updating url: %s', url)\n      // First, update the URL locally without triggering a network request,\n      // this allows keeping a reactive URL if the network is slow.\n      const updateMethod =\n        options.history === 'push' ? history.pushState : history.replaceState\n      mutex = NUM_HISTORY_CALLS_PER_UPDATE\n      updateMethod.call(\n        history,\n        // In next@14.1.0, useSearchParams becomes reactive to shallow updates,\n        // but only if passing `null` as the history state.\n        null,\n        '',\n        url\n      )\n      if (options.scroll) {\n        window.scrollTo(0, 0)\n      }\n      if (!options.shallow) {\n        // Call the Next.js router to perform a network request\n        // and re-render server components.\n        router.replace(url, {\n          scroll: false\n        })\n      }\n    })\n  }, [])\n  return {\n    searchParams: optimisticSearchParams,\n    updateUrl,\n    rateLimitFactor: NUM_HISTORY_CALLS_PER_UPDATE,\n    autoResetQueueOnUpdate: false\n  }\n}\n\nfunction renderURL(search: URLSearchParams) {\n  const { origin, pathname, hash } = location\n  return origin + pathname + renderQueryString(search) + hash\n}\n"],"mappings":";;;;;;;;AAYA,MAAM,+BAA+B;AAErC,IAAI,QAAQ;AAEZ,SAAS,aAAa;AACpB,SAAQ;AACR;;AAGF,SAAS,uBAAuB;AAC9B;AACA,KAAI,SAAS,GAAG;AACd,UAAQ;AAOR,iBAAe;;;AAInB,SAAS,eAAe;AACtB,KAAI,CAAC,mBAAmB,YACtB;CAEF,MAAM,uBAAuB,QAAQ;CACrC,MAAM,oBAAoB,QAAQ;AAClC,SAAQ,eAAe,SAAS,kBAAkB,OAAO,OAAO,KAAK;AACnE;AACA,SAAO,qBAAqB,KAAK,SAAS,OAAO,OAAO;;AAE1D,SAAQ,YAAY,SAAS,eAAe,OAAO,OAAO,KAAK;AAC7D;AACA,SAAO,kBAAkB,KAAK,SAAS,OAAO,OAAO;;AAEvD,sBAAqB;;AAKvB,SAAgB,gBAAgB;AAC9B,iBAAgB;AACd;AACA,SAAO,iBAAiB,YAAY;AACpC,eAAa,OAAO,oBAAoB,YAAY;IACnD;AACH,QAAO;;AAGT,SAAgB,8BAAgD;CAC9D,MAAM,SAAS;CACf,MAAM,eAAe;CACrB,MAAM,CAAC,wBAAwB,6BAC7B,cAA+B;CACjC,MAAMA,YAA+B,aAAa,QAAQ,YAAY;EACpE,MAAM,sBAAsB,oBAAoB;EAChD,MAAM,kBAAkB,oBAAoB,OAC1C,MAAM,KAAK,mBAAmB,gBAAgB,IAAI;AAEpD,wBAAsB;AACpB,OAAI,CAAC,QAAQ,SAAS;AACpB,8BAA0B;AAC1B,SAAK,MAAM,OAAO,gBAChB,oBAAmB,gBAAgB,KAAK;;GAG5C,MAAM,MAAM,UAAU;AACtB,SAAM,oCAAoC;GAG1C,MAAM,eACJ,QAAQ,YAAY,SAAS,QAAQ,YAAY,QAAQ;AAC3D,WAAQ;AACR,gBAAa,KACX,SAGA,MACA,IACA;AAEF,OAAI,QAAQ,OACV,QAAO,SAAS,GAAG;AAErB,OAAI,CAAC,QAAQ,QAGX,QAAO,QAAQ,KAAK,EAClB,QAAQ;;IAIb;AACH,QAAO;EACL,cAAc;EACd;EACA,iBAAiB;EACjB,wBAAwB;;;AAI5B,SAAS,UAAU,QAAyB;CAC1C,MAAM,EAAE,QAAQ,UAAU,SAAS;AACnC,QAAO,SAAS,WAAW,kBAAkB,UAAU"}