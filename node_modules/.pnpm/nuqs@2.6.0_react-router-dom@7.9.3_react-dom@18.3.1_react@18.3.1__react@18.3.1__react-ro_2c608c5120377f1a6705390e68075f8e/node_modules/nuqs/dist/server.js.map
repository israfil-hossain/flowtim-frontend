{"version":3,"file":"server.js","names":["error","$input: unique symbol","searchParams","defaultRateLimit: LimitUrlUpdates","debugEnabled: boolean","error","parseAsString: ParserBuilder<string>","parseAsInteger: ParserBuilder<number>","parseAsIndex: ParserBuilder<number>","parseAsHex: ParserBuilder<number>","parseAsFloat: ParserBuilder<number>","parseAsBoolean: ParserBuilder<boolean>","parseAsTimestamp: ParserBuilder<Date>","parseAsIsoDateTime: ParserBuilder<Date>","parseAsIsoDate: ParserBuilder<Date>","query: string[]","error"],"sources":["../src/lib/errors.ts","../src/loader.ts","../src/cache.ts","../src/lib/queues/rate-limiting.ts","../src/lib/debug.ts","../src/lib/safe-parse.ts","../src/parsers.ts","../src/lib/url-encoding.ts","../src/serializer.ts","../src/standard-schema.ts"],"sourcesContent":["export const errors = {\n  303: 'Multiple adapter contexts detected. This might happen in monorepos.',\n  404: 'nuqs requires an adapter to work with your framework.',\n  409: 'Multiple versions of the library are loaded. This may lead to unexpected behavior. Currently using `%s`, but `%s` (via the %s adapter) was about to load on top.',\n  414: 'Max safe URL length exceeded. Some browsers may not be able to accept this URL. Consider limiting the amount of state stored in the URL.',\n  422: 'Invalid options combination: `limitUrlUpdates: debounce` should be used in SSR scenarios, with `shallow: false`',\n  429: 'URL update rate-limited by the browser. Consider increasing `throttleMs` for key(s) `%s`. %O',\n  500: \"Empty search params cache. Search params can't be accessed in Layouts.\",\n  501: 'Search params cache already populated. Have you called `parse` twice?'\n} as const\n\nexport function error(code: keyof typeof errors) {\n  return `[nuqs] ${errors[code]}\n  See https://err.47ng.com/NUQS-${code}`\n}\n","import type { UrlKeys } from './defs'\nimport type { inferParserType, ParserMap } from './parsers'\n\nexport type LoaderInput =\n  | URL\n  | Request\n  | URLSearchParams\n  | Record<string, string | string[] | undefined>\n  | string\n\n/**\n * @deprecated Use `CreateLoaderOptions` instead.\n */\nexport type LoaderOptions<Parsers extends ParserMap> = {\n  urlKeys?: UrlKeys<Parsers>\n}\nexport type CreateLoaderOptions<P extends ParserMap> = LoaderOptions<P>\nexport type LoaderFunctionOptions = {\n  /**\n   * Whether to use strict parsing. If true, the loader will throw an error if\n   * any of the parsers fail to parse their respective values. If false, the\n   * loader will return null or their default value for any failed parsers.\n   */\n  strict?: boolean\n}\n\nexport type LoaderFunction<Parsers extends ParserMap> = {\n  /**\n   * Load & parse search params from (almost) any input.\n   *\n   * While loaders are typically used in the context of a React Router / Remix\n   * loader function, it can also be used in Next.js API routes or\n   * getServerSideProps functions, or even with the app router `searchParams`\n   * page prop (sync or async), if you don't need the cache behaviours.\n   */\n  (\n    input: LoaderInput,\n    options?: LoaderFunctionOptions\n  ): inferParserType<Parsers>\n  /**\n   * Load & parse search params from (almost) any input.\n   *\n   * While loaders are typically used in the context of a React Router / Remix\n   * loader function, it can also be used in Next.js API routes or\n   * getServerSideProps functions, or even with the app router `searchParams`\n   * page prop (sync or async), if you don't need the cache behaviours.\n   *\n   * Note: this async overload makes it easier to use against the `searchParams`\n   * page prop in Next.js 15 app router:\n   *\n   * ```tsx\n   * export default async function Page({ searchParams }) {\n   *   const parsedSearchParamsPromise = loadSearchParams(searchParams)\n   *   return (\n   *     // Pre-render & stream the shell immediately\n   *     <StaticShell>\n   *       <Suspense>\n   *         // Stream the Promise down\n   *         <DynamicComponent searchParams={parsedSearchParamsPromise} />\n   *       </Suspense>\n   *      </StaticShell>\n   *   )\n   * }\n   * ```\n   */\n  (\n    input: Promise<LoaderInput>,\n    options?: LoaderFunctionOptions\n  ): Promise<inferParserType<Parsers>>\n}\n\nexport function createLoader<Parsers extends ParserMap>(\n  parsers: Parsers,\n  { urlKeys = {} }: CreateLoaderOptions<Parsers> = {}\n): LoaderFunction<Parsers> {\n  type ParsedSearchParams = inferParserType<Parsers>\n\n  function loadSearchParams(\n    input: LoaderInput,\n    options?: LoaderFunctionOptions\n  ): ParsedSearchParams\n\n  function loadSearchParams(\n    input: Promise<LoaderInput>,\n    options?: LoaderFunctionOptions\n  ): Promise<ParsedSearchParams>\n\n  function loadSearchParams(\n    input: LoaderInput | Promise<LoaderInput>,\n    { strict = false }: LoaderFunctionOptions = {}\n  ) {\n    if (input instanceof Promise) {\n      return input.then(i => loadSearchParams(i, { strict }))\n    }\n    const searchParams = extractSearchParams(input)\n    const result = {} as any\n    for (const [key, parser] of Object.entries(parsers)) {\n      const urlKey = urlKeys[key] ?? key\n      const query = searchParams.get(urlKey)\n      if (query === null) {\n        result[key] = parser.defaultValue ?? null\n        continue\n      }\n      let parsedValue\n      try {\n        parsedValue = parser.parse(query)\n      } catch (error) {\n        if (strict) {\n          throw new Error(\n            `[nuqs] Error while parsing query \\`${query}\\` for key \\`${key}\\`: ${error}`\n          )\n        }\n        parsedValue = null\n      }\n      if (strict && query && parsedValue === null) {\n        throw new Error(\n          `[nuqs] Failed to parse query \\`${query}\\` for key \\`${key}\\` (got null)`\n        )\n      }\n      result[key] = parsedValue ?? parser.defaultValue ?? null\n    }\n    return result\n  }\n  return loadSearchParams\n}\n\nfunction extractSearchParams(input: LoaderInput): URLSearchParams {\n  try {\n    if (input instanceof Request) {\n      return input.url ? new URL(input.url).searchParams : new URLSearchParams()\n    }\n    if (input instanceof URL) {\n      return input.searchParams\n    }\n    if (input instanceof URLSearchParams) {\n      return input\n    }\n    if (typeof input === 'object') {\n      const searchParams = new URLSearchParams()\n      for (const [key, value] of Object.entries(input)) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v)\n          }\n        } else if (value !== undefined) {\n          searchParams.set(key, value)\n        }\n      }\n      return searchParams\n    }\n    if (typeof input === 'string') {\n      if (URL.hasOwnProperty('canParse') && URL.canParse(input)) {\n        return new URL(input).searchParams\n      }\n      return new URLSearchParams(input)\n    }\n  } catch {}\n  return new URLSearchParams()\n}\n","import * as React from 'react'\nimport type { SearchParams, UrlKeys } from './defs'\nimport { error } from './lib/errors'\nimport { createLoader, type LoaderFunctionOptions } from './loader'\nimport type { inferParserType, ParserMap } from './parsers'\n\nconst $input: unique symbol = Symbol('Input')\n\ntype CacheInterface<Parsers extends ParserMap> = {\n  parse: {\n    /**\n     * Parse the incoming `searchParams` page prop using the parsers provided,\n     * and make it available to the RSC tree.\n     *\n     * @argument searchParams - The `searchParams` prop from the page component.\n     * @argument loaderOptions.strict - When `true`, the loader will throw an error\n     *  if a search params value is invalid for the given parser, rather than falling\n     * back to the parser's default value (or `null` if no default is set).\n     *\n     * @returns The parsed search params for direct use in the page component.\n     *\n     * Note: Next.js 15 introduced a breaking change in making their\n     * `searchParam` prop a Promise. You will need to await this function\n     * to use the Promise version in Next.js 15.\n     */\n    (\n      searchParams: SearchParams,\n      loaderOptions?: LoaderFunctionOptions\n    ): inferParserType<Parsers>\n\n    /**\n     * Parse the incoming `searchParams` page prop using the parsers provided,\n     * and make it available to the RSC tree.\n     *\n     * @argument searchParams - The `searchParams` prop from the page component (Promise).\n     * @argument loaderOptions.strict - When `true`, the Promise returned from the loader\n     * will reject if a search params value is invalid for the given parser,\n     * rather than falling back to the parser's default value (or `null` if no default is set).\n     *\n     * @returns The parsed search params for direct use in the page component.\n     *\n     * Note: this async version requires Next.js 15 or later.\n     */\n    (\n      searchParams: Promise<any>,\n      loaderOptions?: LoaderFunctionOptions\n    ): Promise<inferParserType<Parsers>>\n  }\n  all: () => inferParserType<Parsers>\n  get: <Key extends keyof Parsers>(key: Key) => inferParserType<Parsers[Key]>\n}\n\nexport function createSearchParamsCache<Parsers extends ParserMap>(\n  parsers: Parsers,\n  { urlKeys = {} }: { urlKeys?: UrlKeys<Parsers> } = {}\n): CacheInterface<Parsers> {\n  const load = createLoader(parsers, { urlKeys })\n  type Keys = keyof Parsers\n  type ParsedSearchParams = inferParserType<Parsers>\n\n  type Cache = {\n    searchParams: Partial<ParsedSearchParams>\n    [$input]?: SearchParams\n  }\n\n  // Why not use a good old object here ?\n  // React's `cache` is bound to the render lifecycle of a page,\n  // whereas a simple object would be bound to the lifecycle of the process,\n  // which may be reused between requests in a serverless environment\n  // (warm lambdas on Vercel or AWS).\n  const getCache = React.cache<() => Cache>(() => ({\n    searchParams: {}\n  }))\n\n  function parseSync(\n    searchParams: SearchParams,\n    loaderOptions: LoaderFunctionOptions\n  ): ParsedSearchParams {\n    const c = getCache()\n    if (Object.isFrozen(c.searchParams)) {\n      // Parse has already been called...\n      if (c[$input] && compareSearchParams(searchParams, c[$input])) {\n        // ...but we're being called with the same contents again,\n        // so we can safely return the same cached result (an example of when\n        // this occurs would be if parse was called in generateMetadata as well\n        // as the page itself).\n        return all()\n      }\n      // Different inputs in the same request - fail\n      throw new Error(error(501))\n    }\n    c.searchParams = load(searchParams, loaderOptions)\n    c[$input] = searchParams\n    return Object.freeze(c.searchParams) as ParsedSearchParams\n  }\n\n  function parse(\n    searchParams: SearchParams,\n    loaderOptions?: LoaderFunctionOptions\n  ): ParsedSearchParams\n  function parse(\n    searchParams: Promise<any>,\n    loaderOptions?: LoaderFunctionOptions\n  ): Promise<ParsedSearchParams>\n  function parse(\n    searchParams: SearchParams | Promise<any>,\n    loaderOptions: LoaderFunctionOptions = {}\n  ) {\n    if (searchParams instanceof Promise) {\n      return searchParams.then(searchParams =>\n        parseSync(searchParams, loaderOptions)\n      )\n    }\n    return parseSync(searchParams, loaderOptions)\n  }\n  function all() {\n    const { searchParams } = getCache()\n    if (Object.keys(searchParams).length === 0) {\n      throw new Error(error(500))\n    }\n    return searchParams as ParsedSearchParams\n  }\n  function get<Key extends Keys>(key: Key): ParsedSearchParams[Key] {\n    const { searchParams } = getCache()\n    const entry = searchParams[key]\n    if (typeof entry === 'undefined') {\n      throw new Error(\n        error(500) +\n          `\n  in get(${String(key)})`\n      )\n    }\n    // @ts-ignore\n    return entry\n  }\n  return { parse, get, all }\n}\n\nexport function compareSearchParams(a: SearchParams, b: SearchParams): boolean {\n  if (a === b) {\n    return true\n  }\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return false\n  }\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n  return true\n}\n","import type { LimitUrlUpdates } from '../../defs'\n\n// 50ms between calls to the history API seems to satisfy Chrome and Firefox.\n// Safari remains annoying with at most 100 calls in 30 seconds.\n// edit: Safari 17 now allows 100 calls per 10 seconds, a bit better.\nfunction getDefaultThrottle() {\n  if (typeof window === 'undefined') return 50\n  // https://stackoverflow.com/questions/7944460/detect-safari-browser\n  // @ts-expect-error\n  const isSafari = Boolean(window.GestureEvent)\n  if (!isSafari) {\n    return 50\n  }\n  try {\n    const match = navigator.userAgent?.match(/version\\/([\\d\\.]+) safari/i)\n    return parseFloat(match![1]!) >= 17 ? 120 : 320\n  } catch {\n    return 320\n  }\n}\n\nexport function throttle(timeMs: number): LimitUrlUpdates {\n  return { method: 'throttle', timeMs }\n}\n\nexport function debounce(timeMs: number): LimitUrlUpdates {\n  return { method: 'debounce', timeMs }\n}\n\nexport const defaultRateLimit: LimitUrlUpdates = throttle(getDefaultThrottle())\n","export const debugEnabled: boolean = isDebugEnabled()\n\nexport function debug(message: string, ...args: any[]): void {\n  if (!debugEnabled) {\n    return\n  }\n  const msg = sprintf(message, ...args)\n  performance.mark(msg)\n  try {\n    // Handle React Devtools not being able to console.log('%s', null)\n    console.log(message, ...args)\n  } catch {\n    console.log(msg)\n  }\n}\n\nexport function warn(message: string, ...args: any[]): void {\n  if (!debugEnabled) {\n    return\n  }\n  console.warn(message, ...args)\n}\n\nexport function sprintf(base: string, ...args: any[]): string {\n  return base.replace(/%[sfdO]/g, match => {\n    const arg = args.shift()\n    return match === '%O' && arg\n      ? JSON.stringify(arg).replace(/\"([^\"]+)\":/g, '$1:')\n      : String(arg)\n  })\n}\n\nfunction isDebugEnabled(): boolean {\n  // Check if localStorage is available.\n  // It may be unavailable in some environments,\n  // like Safari in private browsing mode.\n  // See https://github.com/47ng/nuqs/pull/588\n  try {\n    const test = 'nuqs-localStorage-test'\n    if (typeof localStorage === 'undefined') {\n      return false\n    }\n    localStorage.setItem(test, test)\n    const isStorageAvailable = localStorage.getItem(test) === test\n    localStorage.removeItem(test)\n    return (\n      isStorageAvailable &&\n      (localStorage.getItem('debug') || '').includes('nuqs')\n    )\n  } catch {\n    return false\n  }\n}\n","import type { Parser } from '../parsers'\nimport { warn } from './debug'\n\nexport function safeParse<T>(\n  parser: Parser<T>['parse'],\n  value: string,\n  key?: string\n): T | null {\n  try {\n    return parser(value)\n  } catch (error) {\n    warn(\n      '[nuqs] Error while parsing value `%s`: %O' +\n        (key ? ' (for key `%s`)' : ''),\n      value,\n      error,\n      key\n    )\n    return null\n  }\n}\n","import type { StandardSchemaV1 } from '@standard-schema/spec'\nimport type { Options } from './defs'\nimport { safeParse } from './lib/safe-parse'\n\ntype Require<T, Keys extends keyof T> = Pick<Required<T>, Keys> & Omit<T, Keys>\n\nexport type Parser<T> = {\n  /**\n   * Convert a query string value into a state value.\n   *\n   * If the string value does not represent a valid state value,\n   * the parser should return `null`. Throwing an error is also supported.\n   */\n  parse: (value: string) => T | null\n\n  /**\n   * Render the state value into a query string value.\n   */\n  serialize?: (value: T) => string\n\n  /**\n   * Check if two state values are equal.\n   *\n   * This is used when using the `clearOnDefault` value, to compare the default\n   * value with the set value.\n   *\n   * It makes sense to provide this function when the state value is an object\n   * or an array, as the default referential equality check will not work.\n   */\n  eq?: (a: T, b: T) => boolean\n}\n\nexport type ParserBuilder<T> = Required<Parser<T>> &\n  Options & {\n    /**\n     * Set history type, shallow routing and scroll restoration options\n     * at the hook declaration level.\n     *\n     * Note that you can override those options in individual calls to the\n     * state updater function.\n     */\n    withOptions<This>(this: This, options: Options): This\n\n    /**\n     * Specifying a default value makes the hook state non-nullable when the\n     * query is missing from the URL: the default value is returned instead\n     * of `null`.\n     *\n     * Setting the state to the default value¹ will clear the query string key\n     * from the URL, unless `clearOnDefault` is set to `false`.\n     *\n     * Setting the state to `null` will always clear the query string key\n     * from the URL, and return the default value.\n     *\n     * ¹: Equality is checked with the parser's `eq` function, or referential\n     * equality if not provided.\n     *\n     * @param defaultValue\n     */\n    withDefault(\n      this: ParserBuilder<T>,\n      defaultValue: NonNullable<T>\n    ): Omit<ParserBuilder<T>, 'parseServerSide'> & {\n      readonly defaultValue: NonNullable<T>\n\n      /**\n       * Use the parser in Server Components\n       *\n       * `parse` is intended to be used only by the hook, but you can use this\n       * method to hydrate query values on server-side rendered pages.\n       * See the `server-side-parsing` demo for an example.\n       *\n       * Note that when multiple queries are presented to the parser\n       * (eg: `/?a=1&a=2`), only the **first** will be parsed, to mimic the\n       * behaviour of URLSearchParams:\n       * https://url.spec.whatwg.org/#dom-urlsearchparams-get\n       *\n       * @param value as coming from page props\n       *\n       * @deprecated prefer using loaders instead, as they enforce a strong\n       * bond between the data type and the search param key.\n       */\n      parseServerSide(value: string | string[] | undefined): NonNullable<T>\n    }\n\n    /**\n     * Use the parser in Server Components\n     *\n     * `parse` is intended to be used only by the hook, but you can use this\n     * method to hydrate query values on server-side rendered pages.\n     * See the `server-side-parsing` demo for an example.\n     *\n     * Note that when multiple queries are presented to the parser\n     * (eg: `/?a=1&a=2`), only the **first** will be parsed, to mimic the\n     * behaviour of URLSearchParams:\n     * https://url.spec.whatwg.org/#dom-urlsearchparams-get\n     *\n     * @param value as coming from page props\n     *\n     * @deprecated prefer using loaders instead, as they enforce a strong\n     * bond between the data type and the search param key.\n     */\n    parseServerSide(value: string | string[] | undefined): T | null\n  }\n\n/**\n * Wrap a set of parse/serialize functions into a builder pattern parser\n * you can pass to one of the hooks, making its default value type safe.\n */\nexport function createParser<T>(\n  parser: Require<Parser<T>, 'parse' | 'serialize'>\n): ParserBuilder<T> {\n  function parseServerSideNullable(value: string | string[] | undefined) {\n    if (typeof value === 'undefined') {\n      return null\n    }\n    let str = ''\n    if (Array.isArray(value)) {\n      // Follow the spec:\n      // https://url.spec.whatwg.org/#dom-urlsearchparams-get\n      if (value[0] === undefined) {\n        return null\n      }\n      str = value[0]\n    }\n    if (typeof value === 'string') {\n      str = value\n    }\n    return safeParse(parser.parse, str)\n  }\n\n  return {\n    eq: (a, b) => a === b,\n    ...parser,\n    parseServerSide: parseServerSideNullable,\n    withDefault(defaultValue) {\n      return {\n        ...this,\n        defaultValue,\n        parseServerSide(value) {\n          return parseServerSideNullable(value) ?? defaultValue\n        }\n      }\n    },\n    withOptions(options: Options) {\n      return {\n        ...this,\n        ...options\n      }\n    }\n  }\n}\n\n// Parsers implementations -----------------------------------------------------\n\nexport const parseAsString: ParserBuilder<string> = createParser({\n  parse: v => v,\n  serialize: String\n})\n\nexport const parseAsInteger: ParserBuilder<number> = createParser({\n  parse: v => {\n    const int = parseInt(v)\n    return int == int ? int : null // NaN check at low bundle size cost\n  },\n  serialize: v => '' + Math.round(v)\n})\n\nexport const parseAsIndex: ParserBuilder<number> = createParser({\n  parse: v => {\n    const int = parseInt(v)\n    return int == int ? int - 1 : null // NaN check at low bundle size cost\n  },\n  serialize: v => '' + Math.round(v + 1)\n})\n\nexport const parseAsHex: ParserBuilder<number> = createParser({\n  parse: v => {\n    const int = parseInt(v, 16)\n    return int == int ? int : null // NaN check at low bundle size cost\n  },\n  serialize: v => {\n    const hex = Math.round(v).toString(16)\n    return (hex.length & 1 ? '0' : '') + hex\n  }\n})\n\nexport const parseAsFloat: ParserBuilder<number> = createParser({\n  parse: v => {\n    const float = parseFloat(v)\n    return float == float ? float : null // NaN check at low bundle size cost\n  },\n  serialize: String\n})\n\nexport const parseAsBoolean: ParserBuilder<boolean> = createParser({\n  parse: v => v === 'true',\n  serialize: String\n})\n\nfunction compareDates(a: Date, b: Date) {\n  return a.valueOf() === b.valueOf()\n}\n\n/**\n * Querystring encoded as the number of milliseconds since epoch,\n * and returned as a Date object.\n */\nexport const parseAsTimestamp: ParserBuilder<Date> = createParser({\n  parse: v => {\n    const ms = parseInt(v)\n    return ms == ms ? new Date(ms) : null // NaN check at low bundle size cost\n  },\n  serialize: (v: Date) => '' + v.valueOf(),\n  eq: compareDates\n})\n\n/**\n * Querystring encoded as an ISO-8601 string (UTC),\n * and returned as a Date object.\n */\nexport const parseAsIsoDateTime: ParserBuilder<Date> = createParser({\n  parse: v => {\n    const date = new Date(v)\n    // NaN check at low bundle size cost\n    return date.valueOf() == date.valueOf() ? date : null\n  },\n  serialize: (v: Date) => v.toISOString(),\n  eq: compareDates\n})\n\n/**\n * Querystring encoded as an ISO-8601 string (UTC)\n * without the time zone offset, and returned as\n * a Date object.\n *\n * The Date is parsed without the time zone offset,\n * making it at 00:00:00 UTC.\n */\nexport const parseAsIsoDate: ParserBuilder<Date> = createParser({\n  parse: v => {\n    const date = new Date(v.slice(0, 10))\n    // NaN check at low bundle size cost\n    return date.valueOf() == date.valueOf() ? date : null\n  },\n  serialize: (v: Date) => v.toISOString().slice(0, 10),\n  eq: compareDates\n})\n\n/**\n * String-based enums provide better type-safety for known sets of values.\n * You will need to pass the parseAsStringEnum function a list of your enum values\n * in order to validate the query string. Anything else will return `null`,\n * or your default value if specified.\n *\n * Example:\n * ```ts\n * enum Direction {\n *   up = 'UP',\n *   down = 'DOWN',\n *   left = 'LEFT',\n *   right = 'RIGHT'\n * }\n *\n * const [direction, setDirection] = useQueryState(\n *   'direction',\n *    parseAsStringEnum<Direction>(Object.values(Direction)) // pass a list of allowed values\n *      .withDefault(Direction.up)\n * )\n * ```\n *\n * Note: the query string value will be the value of the enum, not its name\n * (example above: `direction=UP`).\n *\n * @param validValues The values you want to accept\n */\nexport function parseAsStringEnum<Enum extends string>(\n  validValues: Enum[]\n): ParserBuilder<Enum> {\n  // Delegate implementation to parseAsStringLiteral to avoid duplication.\n  return parseAsStringLiteral(validValues as readonly Enum[])\n}\n\n/**\n * String-based literals provide better type-safety for known sets of values.\n * You will need to pass the parseAsStringLiteral function a list of your string values\n * in order to validate the query string. Anything else will return `null`,\n * or your default value if specified.\n *\n * Example:\n * ```ts\n * const colors = [\"red\", \"green\", \"blue\"] as const\n *\n * const [color, setColor] = useQueryState(\n *   'color',\n *    parseAsStringLiteral(colors) // pass a readonly list of allowed values\n *      .withDefault(\"red\")\n * )\n * ```\n *\n * @param validValues The values you want to accept\n */\nexport function parseAsStringLiteral<const Literal extends string>(\n  validValues: readonly Literal[]\n): ParserBuilder<Literal> {\n  return createParser({\n    parse: (query: string) => {\n      const asConst = query as unknown as Literal\n      return validValues.includes(asConst) ? asConst : null\n    },\n    serialize: String\n  })\n}\n\n/**\n * Number-based literals provide better type-safety for known sets of values.\n * You will need to pass the parseAsNumberLiteral function a list of your number values\n * in order to validate the query string. Anything else will return `null`,\n * or your default value if specified.\n *\n * Example:\n * ```ts\n * const diceSides = [1, 2, 3, 4, 5, 6] as const\n *\n * const [side, setSide] = useQueryState(\n *   'side',\n *    parseAsNumberLiteral(diceSides) // pass a readonly list of allowed values\n *      .withDefault(4)\n * )\n * ```\n *\n * @param validValues The values you want to accept\n */\nexport function parseAsNumberLiteral<const Literal extends number>(\n  validValues: readonly Literal[]\n): ParserBuilder<Literal> {\n  return createParser({\n    parse: (query: string) => {\n      const asConst = parseFloat(query) as unknown as Literal\n      if (validValues.includes(asConst)) {\n        return asConst\n      }\n      return null\n    },\n    serialize: String\n  })\n}\n\n/**\n * Encode any object shape into the querystring value as JSON.\n * Note: you may want to use `useQueryStates` for finer control over\n * multiple related query keys.\n *\n * @param runtimeParser Runtime parser (eg: Zod schema or Standard Schema) to validate after JSON.parse\n */\nexport function parseAsJson<T>(\n  validator: ((value: unknown) => T | null) | StandardSchemaV1<T>\n): ParserBuilder<T> {\n  return createParser({\n    parse: query => {\n      try {\n        const obj = JSON.parse(query)\n        if ('~standard' in validator) {\n          const result = validator['~standard'].validate(obj)\n          if (result instanceof Promise) {\n            throw new Error(\n              '[nuqs] Only synchronous Standard Schemas are supported in parseAsJson.'\n            )\n          }\n          return result.issues ? null : result.value\n        }\n        return validator(obj)\n      } catch {\n        return null\n      }\n    },\n    serialize: value => JSON.stringify(value),\n    eq(a, b) {\n      // Check for referential equality first\n      return a === b || JSON.stringify(a) === JSON.stringify(b)\n    }\n  })\n}\n\n/**\n * A comma-separated list of items.\n * Items are URI-encoded for safety, so they may not look nice in the URL.\n *\n * @param itemParser Parser for each individual item in the array\n * @param separator The character to use to separate items (default ',')\n */\nexport function parseAsArrayOf<ItemType>(\n  itemParser: Parser<ItemType>,\n  separator = ','\n): ParserBuilder<ItemType[]> {\n  const itemEq = itemParser.eq ?? ((a: ItemType, b: ItemType) => a === b)\n  const encodedSeparator = encodeURIComponent(separator)\n  // todo: Handle default item values and make return type non-nullable\n  return createParser({\n    parse: query => {\n      if (query === '') {\n        // Empty query should not go through the split/map/filter logic,\n        // see https://github.com/47ng/nuqs/issues/329\n        return [] as ItemType[]\n      }\n      return query\n        .split(separator)\n        .map((item, index) =>\n          safeParse(\n            itemParser.parse,\n            item.replaceAll(encodedSeparator, separator),\n            `[${index}]`\n          )\n        )\n        .filter(value => value !== null && value !== undefined) as ItemType[]\n    },\n    serialize: values =>\n      values\n        .map<string>(value => {\n          const str = itemParser.serialize\n            ? itemParser.serialize(value)\n            : String(value)\n          return str.replaceAll(separator, encodedSeparator)\n        })\n        .join(separator),\n    eq(a, b) {\n      if (a === b) {\n        return true // Referentially stable\n      }\n      if (a.length !== b.length) {\n        return false\n      }\n      return a.every((value, index) => itemEq(value, b[index]!))\n    }\n  })\n}\n\ntype inferSingleParserType<Parser> = Parser extends ParserBuilder<\n  infer Value\n> & {\n  defaultValue: infer Value\n}\n  ? Value\n  : Parser extends ParserBuilder<infer Value>\n    ? Value | null\n    : never\n\ntype inferParserRecordType<Map extends Record<string, ParserBuilder<any>>> = {\n  [Key in keyof Map]: inferSingleParserType<Map[Key]>\n} & {}\n\n/**\n * Type helper to extract the underlying returned data type of a parser\n * or of an object describing multiple parsers and their associated keys.\n *\n * Usage:\n *\n * ```ts\n * import { type inferParserType } from 'nuqs' // or 'nuqs/server'\n *\n * const intNullable = parseAsInteger\n * const intNonNull = parseAsInteger.withDefault(0)\n *\n * inferParserType<typeof intNullable> // number | null\n * inferParserType<typeof intNonNull> // number\n *\n * const parsers = {\n *  a: parseAsInteger,\n *  b: parseAsBoolean.withDefault(false)\n * }\n *\n * inferParserType<typeof parsers>\n * // { a: number | null, b: boolean }\n * ```\n */\nexport type inferParserType<Input> =\n  Input extends ParserBuilder<any>\n    ? inferSingleParserType<Input>\n    : Input extends Record<string, ParserBuilder<any>>\n      ? inferParserRecordType<Input>\n      : never\n\nexport type ParserWithOptionalDefault<T> = ParserBuilder<T> & {\n  defaultValue?: T\n}\nexport type ParserMap = Record<string, ParserWithOptionalDefault<any>>\n","import { error } from './errors'\n\nexport function renderQueryString(search: URLSearchParams): string {\n  if (search.size === 0) {\n    return ''\n  }\n  const query: string[] = []\n  for (const [key, value] of search.entries()) {\n    // Replace disallowed characters in keys,\n    // see https://github.com/47ng/nuqs/issues/599\n    const safeKey = key\n      .replace(/#/g, '%23')\n      .replace(/&/g, '%26')\n      .replace(/\\+/g, '%2B')\n      .replace(/=/g, '%3D')\n      .replace(/\\?/g, '%3F')\n    query.push(`${safeKey}=${encodeQueryValue(value)}`)\n  }\n  const queryString = '?' + query.join('&')\n  warnIfURLIsTooLong(queryString)\n  return queryString\n}\n\nexport function encodeQueryValue(input: string): string {\n  return (\n    input\n      // Encode existing % signs first to avoid appearing\n      // as an incomplete escape sequence:\n      .replace(/%/g, '%25')\n      // Note: spaces are encoded as + in RFC 3986,\n      // so we pre-encode existing + signs to avoid confusion\n      // before converting spaces to + signs.\n      .replace(/\\+/g, '%2B')\n      .replace(/ /g, '+')\n      // Encode other URI-reserved characters\n      .replace(/#/g, '%23')\n      .replace(/&/g, '%26')\n      // Encode characters that break URL detection on some platforms\n      // and would drop the tail end of the querystring:\n      .replace(/\"/g, '%22')\n      .replace(/'/g, '%27')\n      .replace(/`/g, '%60')\n      .replace(/</g, '%3C')\n      .replace(/>/g, '%3E')\n      // Encode invisible ASCII control characters\n      .replace(/[\\x00-\\x1F]/g, char => encodeURIComponent(char))\n  )\n}\n\n// Note: change error documentation (NUQS-414) when changing this value.\nexport const URL_MAX_LENGTH = 2000\n\nexport function warnIfURLIsTooLong(queryString: string): void {\n  if (process.env.NODE_ENV === 'production') {\n    return\n  }\n  if (typeof location === 'undefined') {\n    return\n  }\n  const url = new URL(location.href)\n  url.search = queryString\n  if (url.href.length > URL_MAX_LENGTH) {\n    console.warn(error(414))\n  }\n}\n","import type { Nullable, Options, UrlKeys } from './defs'\nimport { renderQueryString } from './lib/url-encoding'\nimport type { inferParserType, ParserMap } from './parsers'\n\ntype Base = string | URLSearchParams | URL\n\nexport type CreateSerializerOptions<Parsers extends ParserMap> = Pick<\n  Options,\n  'clearOnDefault'\n> & {\n  urlKeys?: UrlKeys<Parsers>\n  processUrlSearchParams?: (searchParams: URLSearchParams) => URLSearchParams\n}\n\ntype SerializeFunction<\n  Parsers extends ParserMap,\n  BaseType extends Base = Base,\n  Return = string\n> = {\n  /**\n   * Generate a query string for the given values.\n   */\n  (values: Partial<Nullable<inferParserType<Parsers>>>): Return\n  /**\n   * Append/amend the query string of the given base with the given values.\n   *\n   * Existing search param values will kept, unless:\n   * - the value is null, in which case the search param will be deleted\n   * - another value is given for an existing key, in which case the\n   *  search param will be updated\n   */\n  (\n    base: BaseType,\n    values: Partial<Nullable<inferParserType<Parsers>>> | null\n  ): Return\n}\n\nexport function createSerializer<\n  Parsers extends ParserMap,\n  BaseType extends Base = Base,\n  Return = string\n>(\n  parsers: Parsers,\n  {\n    clearOnDefault = true,\n    urlKeys = {},\n    processUrlSearchParams\n  }: CreateSerializerOptions<Parsers> = {}\n): SerializeFunction<Parsers, BaseType, Return> {\n  type Values = Partial<Nullable<inferParserType<Parsers>>>\n\n  /**\n   * Generate a query string for the given values.\n   */\n  function serialize(values: Values): Return\n  /**\n   * Append/amend the query string of the given base with the given values.\n   *\n   * Existing search param values will kept, unless:\n   * - the value is null, in which case the search param will be deleted\n   * - another value is given for an existing key, in which case the\n   *  search param will be updated\n   */\n  function serialize(base: BaseType, values: Values | null): Return\n  function serialize(\n    arg1BaseOrValues: BaseType | Values,\n    arg2values: Values | null = {}\n  ) {\n    let [base, search] = isBase<BaseType>(arg1BaseOrValues)\n      ? splitBase(arg1BaseOrValues)\n      : ['', new URLSearchParams()]\n    const values = isBase(arg1BaseOrValues) ? arg2values : arg1BaseOrValues\n    if (values === null) {\n      for (const key in parsers) {\n        const urlKey = urlKeys[key] ?? key\n        search.delete(urlKey)\n      }\n      if (processUrlSearchParams) {\n        search = processUrlSearchParams(search)\n      }\n      return (base + renderQueryString(search)) as Return\n    }\n    for (const key in parsers) {\n      const parser = parsers[key]\n      const value = values[key]\n      if (!parser || value === undefined) {\n        continue\n      }\n      const urlKey = urlKeys[key] ?? key\n      const isMatchingDefault =\n        parser.defaultValue !== undefined &&\n        (parser.eq ?? ((a, b) => a === b))(value, parser.defaultValue)\n\n      if (\n        value === null ||\n        ((parser.clearOnDefault ?? clearOnDefault ?? true) && isMatchingDefault)\n      ) {\n        search.delete(urlKey)\n      } else {\n        search.set(urlKey, parser.serialize(value))\n      }\n    }\n    if (processUrlSearchParams) {\n      search = processUrlSearchParams(search)\n    }\n    return base + renderQueryString(search)\n  }\n  return serialize\n}\n\nfunction isBase<BaseType>(base: any): base is BaseType {\n  return (\n    typeof base === 'string' ||\n    base instanceof URLSearchParams ||\n    base instanceof URL\n  )\n}\n\nfunction splitBase<BaseType extends Base>(base: BaseType) {\n  if (typeof base === 'string') {\n    const [path = '', ...search] = base.split('?')\n    return [path, new URLSearchParams(search.join('?'))] as const\n  } else if (base instanceof URLSearchParams) {\n    return ['', new URLSearchParams(base)] as const // Operate on a copy of URLSearchParams, as derived classes may restrict its allowed methods\n  } else {\n    return [\n      base.origin + base.pathname,\n      new URLSearchParams(base.searchParams)\n    ] as const\n  }\n}\n","import type { StandardSchemaV1 } from '@standard-schema/spec'\nimport { createLoader, type CreateLoaderOptions } from './loader'\nimport type { ParserMap, inferParserType } from './parsers'\nimport { createSerializer } from './serializer'\n\nexport type CreateStandardSchemaV1Options<\n  Parsers extends ParserMap,\n  PartialOutput extends boolean = false\n> = CreateLoaderOptions<Parsers> & {\n  /**\n   * Marks the output type as Partial, and removes any keys\n   * from the output that are not present in the input.\n   *\n   * This is useful for TanStack Router, to avoid reflecting default values\n   * (or null) in the URL, and to make search params optional in Links,\n   * as default values are handled by nuqs.\n   *\n   * @default false\n   */\n  partialOutput?: PartialOutput\n}\n\ntype MaybePartial<Condition, Type> = Condition extends true\n  ? Partial<Type>\n  : Type\n\nexport function createStandardSchemaV1<\n  Parsers extends ParserMap,\n  PartialOutput extends boolean = false\n>(\n  parsers: Parsers,\n  {\n    urlKeys,\n    partialOutput = false as PartialOutput\n  }: CreateStandardSchemaV1Options<Parsers, PartialOutput> = {}\n): StandardSchemaV1<MaybePartial<PartialOutput, inferParserType<Parsers>>> {\n  const serialize = createSerializer(parsers, { urlKeys })\n  const load = createLoader(parsers, { urlKeys })\n  return {\n    '~standard': {\n      version: 1,\n      vendor: 'nuqs',\n      validate(input) {\n        try {\n          const url = serialize(input as any)\n          const value = load(url, { strict: true })\n          if (partialOutput) {\n            for (const key in value) {\n              if (!(key in (input as any))) {\n                delete value[key]\n              }\n            }\n          }\n          return { value }\n        } catch (error) {\n          return {\n            issues: [\n              {\n                message: error instanceof Error ? error.message : String(error)\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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"}