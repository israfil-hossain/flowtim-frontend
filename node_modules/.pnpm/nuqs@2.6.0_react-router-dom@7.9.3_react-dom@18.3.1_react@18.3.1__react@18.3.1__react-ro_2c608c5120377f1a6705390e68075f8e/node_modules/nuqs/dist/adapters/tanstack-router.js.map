{"version":3,"file":"tanstack-router.js","names":["updateUrl: UpdateUrlFunction","search","NuqsAdapter: AdapterProvider"],"sources":["../../src/adapters/tanstack-router.ts"],"sourcesContent":["import { useLocation, useMatches, useNavigate } from '@tanstack/react-router'\nimport { startTransition, useCallback, useMemo } from 'react'\nimport { renderQueryString } from '../lib/url-encoding'\nimport { createAdapterProvider, type AdapterProvider } from './lib/context'\nimport type { AdapterInterface, UpdateUrlFunction } from './lib/defs'\n\nfunction useNuqsTanstackRouterAdapter(watchKeys: string[]): AdapterInterface {\n  const search = useLocation({\n    select: state =>\n      Object.fromEntries(\n        Object.entries(state.search).filter(([key]) => watchKeys.includes(key))\n      )\n  })\n  const navigate = useNavigate()\n  const from = useMatches({\n    select: matches =>\n      matches.length > 0\n        ? (matches[matches.length - 1]?.fullPath as string)\n        : undefined\n  })\n  const searchParams = useMemo(\n    () =>\n      // search is a Record<string, string | number | object | Array<string | number>>,\n      // so we need to flatten it into a list of key/value pairs,\n      // replicating keys that have multiple values before passing it\n      // to URLSearchParams, otherwise { foo: ['bar', 'baz'] }\n      // ends up as { foo → 'bar,baz' } instead of { foo → 'bar', foo → 'baz' }\n      new URLSearchParams(\n        Object.entries(search).flatMap(([key, value]) => {\n          if (Array.isArray(value)) {\n            return value.map(v => [key, v])\n          } else if (typeof value === 'object' && value !== null) {\n            // TSR JSON.parses objects in the search params,\n            // but parseAsJson expects a JSON string,\n            // so we need to re-stringify it first.\n            return [[key, JSON.stringify(value)]]\n          } else {\n            return [[key, value]]\n          }\n        })\n      ),\n    [search, watchKeys.join(',')]\n  )\n\n  const updateUrl: UpdateUrlFunction = useCallback(\n    (search, options) => {\n      // Wrapping in a startTransition seems to be necessary\n      // to support scroll restoration\n      startTransition(() => {\n        navigate({\n          // I know the docs say to use `search` here, but it would require\n          // userland code to stitch the nuqs definitions to the route declarations\n          // in order for TSR to serialize them, which kind of breaks the\n          // \"works out of the box\" promise, and it also wouldn't support\n          // the custom URL encoding.\n          // TBC if it causes issues with consuming those search params\n          // in other parts of the app.\n          //\n          // When we clear the search, passing an empty string causes\n          // a type error and possible basepath issues, so we switch it to '.' instead.\n          // See https://github.com/47ng/nuqs/pull/953#issuecomment-3003583471\n          to: renderQueryString(search) || '.',\n          // `from` will be handled by tanstack router match resolver, code snippet:\n          // https://github.com/TanStack/router/blob/5d940e2d8bdb12e213eede0abe8012855433ec4b/packages/react-router/src/link.tsx#L108-L112\n          ...(from ? { from } : {}),\n          replace: options.history === 'replace',\n          resetScroll: options.scroll,\n          hash: prevHash => prevHash ?? ''\n        })\n      })\n    },\n    [navigate, from]\n  )\n\n  return {\n    searchParams,\n    updateUrl,\n    rateLimitFactor: 1\n  }\n}\n\nexport const NuqsAdapter: AdapterProvider = createAdapterProvider(\n  useNuqsTanstackRouterAdapter\n)\n"],"mappings":";;;;;;;AAMA,SAAS,6BAA6B,WAAuC;CAC3E,MAAM,SAAS,YAAY,EACzB,SAAQ,UACN,OAAO,YACL,OAAO,QAAQ,MAAM,QAAQ,QAAQ,CAAC,SAAS,UAAU,SAAS;CAGxE,MAAM,WAAW;CACjB,MAAM,OAAO,WAAW,EACtB,SAAQ,YACN,QAAQ,SAAS,IACZ,QAAQ,QAAQ,SAAS,IAAI,WAC9B;CAER,MAAM,eAAe,cAOjB,IAAI,gBACF,OAAO,QAAQ,QAAQ,SAAS,CAAC,KAAK,WAAW;AAC/C,MAAI,MAAM,QAAQ,OAChB,QAAO,MAAM,KAAI,MAAK,CAAC,KAAK;WACnB,OAAO,UAAU,YAAY,UAAU,KAIhD,QAAO,CAAC,CAAC,KAAK,KAAK,UAAU;MAE7B,QAAO,CAAC,CAAC,KAAK;MAItB,CAAC,QAAQ,UAAU,KAAK;CAG1B,MAAMA,YAA+B,aAClC,UAAQ,YAAY;AAGnB,wBAAsB;AACpB,YAAS;IAYP,IAAI,kBAAkBC,aAAW;IAGjC,GAAI,OAAO,EAAE,SAAS;IACtB,SAAS,QAAQ,YAAY;IAC7B,aAAa,QAAQ;IACrB,OAAM,aAAY,YAAY;;;IAIpC,CAAC,UAAU;AAGb,QAAO;EACL;EACA;EACA,iBAAiB;;;AAIrB,MAAaC,cAA+B,sBAC1C"}