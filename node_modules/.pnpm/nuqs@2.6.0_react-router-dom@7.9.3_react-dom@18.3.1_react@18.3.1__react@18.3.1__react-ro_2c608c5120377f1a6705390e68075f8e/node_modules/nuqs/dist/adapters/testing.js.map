{"version":3,"file":"testing.js","names":[],"sources":["../../src/adapters/testing.ts"],"sourcesContent":["import {\n  createElement,\n  useCallback,\n  useMemo,\n  type ReactElement,\n  type ReactNode\n} from 'react'\nimport { resetQueues } from '../lib/queues/reset'\nimport { renderQueryString } from './custom'\nimport { context, type AdapterProps } from './lib/context'\nimport type { AdapterInterface, AdapterOptions } from './lib/defs'\n\nexport type UrlUpdateEvent = {\n  searchParams: URLSearchParams\n  queryString: string\n  options: Required<AdapterOptions>\n}\n\nexport type OnUrlUpdateFunction = (event: UrlUpdateEvent) => void\n\ntype TestingAdapterProps = {\n  searchParams?: string | Record<string, string> | URLSearchParams\n  onUrlUpdate?: OnUrlUpdateFunction\n  rateLimitFactor?: number\n  resetUrlUpdateQueueOnMount?: boolean\n  children: ReactNode\n} & AdapterProps\n\nexport function NuqsTestingAdapter({\n  resetUrlUpdateQueueOnMount = true,\n  defaultOptions,\n  processUrlSearchParams,\n  ...props\n}: TestingAdapterProps): ReactElement {\n  if (resetUrlUpdateQueueOnMount) {\n    resetQueues()\n  }\n  const searchParams = useMemo(\n    () => new URLSearchParams(props.searchParams),\n    [props.searchParams?.toString()]\n  )\n  const updateUrl = useCallback<AdapterInterface['updateUrl']>(\n    (search, options) => {\n      props.onUrlUpdate?.({\n        searchParams: new URLSearchParams(search),\n        queryString: renderQueryString(search),\n        options\n      })\n    },\n    [props.onUrlUpdate]\n  )\n  const getSearchParamsSnapshot = useCallback(() => {\n    return new URLSearchParams(props.searchParams)\n  }, [props.searchParams?.toString()])\n  const useAdapter = (): AdapterInterface => ({\n    searchParams,\n    updateUrl,\n    getSearchParamsSnapshot,\n    rateLimitFactor: props.rateLimitFactor ?? 0\n  })\n  return createElement(\n    context.Provider,\n    { value: { useAdapter, defaultOptions, processUrlSearchParams } },\n    props.children\n  )\n}\n\n/**\n * A higher order component that wraps the children with the NuqsTestingAdapter\n *\n * It allows creating wrappers for testing purposes by providing only the\n * necessary props to the NuqsTestingAdapter.\n *\n * Usage:\n * ```tsx\n * render(<MyComponent />, {\n *   wrapper: withNuqsTestingAdapter({ searchParams: '?foo=bar' })\n * })\n * ```\n */\nexport function withNuqsTestingAdapter(\n  props: Omit<TestingAdapterProps, 'children'> = {}\n) {\n  return function NuqsTestingAdapterWrapper({\n    children\n  }: {\n    children: ReactNode\n  }): ReactElement {\n    return createElement(\n      NuqsTestingAdapter,\n      // @ts-expect-error - Ignore missing children error\n      props,\n      children\n    )\n  }\n}\n"],"mappings":";;;;;;;;;AA4BA,SAAgB,mBAAmB,EACjC,6BAA6B,MAC7B,gBACA,uBACA,GAAG,SACiC;AACpC,KAAI,2BACF;CAEF,MAAM,eAAe,cACb,IAAI,gBAAgB,MAAM,eAChC,CAAC,MAAM,cAAc;CAEvB,MAAM,YAAY,aACf,QAAQ,YAAY;AACnB,QAAM,cAAc;GAClB,cAAc,IAAI,gBAAgB;GAClC,aAAa,kBAAkB;GAC/B;;IAGJ,CAAC,MAAM;CAET,MAAM,0BAA0B,kBAAkB;AAChD,SAAO,IAAI,gBAAgB,MAAM;IAChC,CAAC,MAAM,cAAc;CACxB,MAAM,oBAAsC;EAC1C;EACA;EACA;EACA,iBAAiB,MAAM,mBAAmB;;AAE5C,QAAO,cACL,QAAQ,UACR,EAAE,OAAO;EAAE;EAAY;EAAgB;MACvC,MAAM;;;;;;;;;;;;;;;AAiBV,SAAgB,uBACd,QAA+C,IAC/C;AACA,QAAO,SAAS,0BAA0B,EACxC,YAGe;AACf,SAAO,cACL,oBAEA,OACA"}