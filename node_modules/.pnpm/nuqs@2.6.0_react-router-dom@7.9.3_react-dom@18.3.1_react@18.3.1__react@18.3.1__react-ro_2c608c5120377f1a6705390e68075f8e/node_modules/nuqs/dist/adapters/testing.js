'use client';

import "../debounce-DY4Q9peb.js";
import { context, renderQueryString } from "../context-BxT884es.js";
import { resetQueues } from "../reset-DAVNyB3X.js";
import "../custom-Bd-6yE9W.js";
import { createElement, useCallback, useMemo } from "react";

//#region src/adapters/testing.ts
function NuqsTestingAdapter({ resetUrlUpdateQueueOnMount = true, defaultOptions, processUrlSearchParams,...props }) {
	if (resetUrlUpdateQueueOnMount) resetQueues();
	const searchParams = useMemo(() => new URLSearchParams(props.searchParams), [props.searchParams?.toString()]);
	const updateUrl = useCallback((search, options) => {
		props.onUrlUpdate?.({
			searchParams: new URLSearchParams(search),
			queryString: renderQueryString(search),
			options
		});
	}, [props.onUrlUpdate]);
	const getSearchParamsSnapshot = useCallback(() => {
		return new URLSearchParams(props.searchParams);
	}, [props.searchParams?.toString()]);
	const useAdapter = () => ({
		searchParams,
		updateUrl,
		getSearchParamsSnapshot,
		rateLimitFactor: props.rateLimitFactor ?? 0
	});
	return createElement(context.Provider, { value: {
		useAdapter,
		defaultOptions,
		processUrlSearchParams
	} }, props.children);
}
/**
* A higher order component that wraps the children with the NuqsTestingAdapter
*
* It allows creating wrappers for testing purposes by providing only the
* necessary props to the NuqsTestingAdapter.
*
* Usage:
* ```tsx
* render(<MyComponent />, {
*   wrapper: withNuqsTestingAdapter({ searchParams: '?foo=bar' })
* })
* ```
*/
function withNuqsTestingAdapter(props = {}) {
	return function NuqsTestingAdapterWrapper({ children }) {
		return createElement(NuqsTestingAdapter, props, children);
	};
}

//#endregion
export { NuqsTestingAdapter, withNuqsTestingAdapter };
//# sourceMappingURL=testing.js.map