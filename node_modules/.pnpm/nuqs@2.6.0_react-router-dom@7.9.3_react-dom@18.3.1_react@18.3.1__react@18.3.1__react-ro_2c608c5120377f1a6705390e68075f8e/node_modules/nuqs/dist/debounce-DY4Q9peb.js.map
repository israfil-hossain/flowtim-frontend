{"version":3,"file":"debounce-DY4Q9peb.js","names":["defaultRateLimit: LimitUrlUpdates","all: Map<\n    keyof Events,\n    Array<(event: Events[keyof Events]) => any>\n  >","resolve: (value: T | PromiseLike<T>) => void","reject: () => void","error","globalThrottleQueue: ThrottledQueue","error","update","debounceController: DebounceController"],"sources":["../src/lib/queues/rate-limiting.ts","../src/lib/emitter.ts","../src/lib/timeout.ts","../src/lib/with-resolvers.ts","../src/lib/compose.ts","../src/lib/queues/throttle.ts","../src/lib/queues/useSyncExternalStores.ts","../src/lib/queues/debounce.ts"],"sourcesContent":["import type { LimitUrlUpdates } from '../../defs'\n\n// 50ms between calls to the history API seems to satisfy Chrome and Firefox.\n// Safari remains annoying with at most 100 calls in 30 seconds.\n// edit: Safari 17 now allows 100 calls per 10 seconds, a bit better.\nfunction getDefaultThrottle() {\n  if (typeof window === 'undefined') return 50\n  // https://stackoverflow.com/questions/7944460/detect-safari-browser\n  // @ts-expect-error\n  const isSafari = Boolean(window.GestureEvent)\n  if (!isSafari) {\n    return 50\n  }\n  try {\n    const match = navigator.userAgent?.match(/version\\/([\\d\\.]+) safari/i)\n    return parseFloat(match![1]!) >= 17 ? 120 : 320\n  } catch {\n    return 320\n  }\n}\n\nexport function throttle(timeMs: number): LimitUrlUpdates {\n  return { method: 'throttle', timeMs }\n}\n\nexport function debounce(timeMs: number): LimitUrlUpdates {\n  return { method: 'debounce', timeMs }\n}\n\nexport const defaultRateLimit: LimitUrlUpdates = throttle(getDefaultThrottle())\n","export type Emitter<Events extends Record<string, unknown>> = {\n  on<Key extends keyof Events>(\n    type: Key,\n    handler: (event: Events[Key]) => any\n  ): () => void\n  off<Key extends keyof Events>(\n    type: Key,\n    handler?: (event: Events[Key]) => any\n  ): void\n  emit<Key extends keyof Events>(\n    type: Key,\n    event?: Events[Key] extends undefined ? never : Events[Key]\n  ): void\n  all: Map<keyof Events, Array<(event: Events[keyof Events]) => any>>\n}\n\nexport function createEmitter<\n  Events extends Record<string, unknown>\n>(): Emitter<Events> {\n  const all: Map<\n    keyof Events,\n    Array<(event: Events[keyof Events]) => any>\n  > = new Map()\n  return {\n    all,\n    on<Key extends keyof Events>(\n      type: Key,\n      handler: (event: Events[Key]) => any\n    ): () => void {\n      const handlers = all.get(type) || []\n      handlers.push(handler as (event: Events[keyof Events]) => any)\n      all.set(type, handlers)\n      return () => this.off(type, handler)\n    },\n    off<Key extends keyof Events>(\n      type: Key,\n      handler: (event: Events[Key]) => any\n    ): void {\n      const handlers = all.get(type)\n      if (handlers) {\n        all.set(\n          type,\n          handlers.filter(h => h !== handler)\n        )\n      }\n    },\n    emit<Key extends keyof Events>(\n      type: Key,\n      event?: Events[Key] extends undefined ? never : Events[Key]\n    ): void {\n      const handlers = all.get(type)\n      handlers?.forEach(handler => handler(event as Events[keyof Events]))\n    }\n  }\n}\n","// Source:\n// https://www.bennadel.com/blog/4195-using-abortcontroller-to-debounce-settimeout-calls-in-javascript.htm\n\nexport function timeout(\n  callback: () => void,\n  ms: number,\n  signal: AbortSignal\n): void {\n  function onTick() {\n    callback()\n    signal.removeEventListener('abort', onAbort)\n  }\n  const id = setTimeout(onTick, ms)\n  function onAbort() {\n    clearTimeout(id)\n    signal.removeEventListener('abort', onAbort)\n  }\n  signal.addEventListener('abort', onAbort)\n}\n","export type Resolvers<T> = {\n  promise: Promise<T>\n  resolve: (value: T | PromiseLike<T>) => void\n  reject: (reason?: any) => void\n}\n\nexport function withResolvers<T>(): Resolvers<T> {\n  const P = Promise<T>\n  if (Promise.hasOwnProperty('withResolvers')) {\n    return Promise.withResolvers<T>()\n  }\n  // todo: Remove this once Promise.withResolvers is Baseline GA (September 2026)\n  let resolve: (value: T | PromiseLike<T>) => void = () => {}\n  let reject: () => void = () => {}\n  const promise = new P((res, rej) => {\n    resolve = res\n    reject = rej\n  })\n  return { promise, resolve, reject }\n}\n","export function compose(\n  fns: React.TransitionStartFunction[],\n  final: () => void\n): void {\n  // Build a nested callback chain iteratively (avoids recursion helper)\n  let next = final\n  for (let i = fns.length - 1; i >= 0; i--) {\n    const fn = fns[i]\n    if (!fn) continue\n    const prev = next\n    next = () => fn(prev)\n  }\n  next()\n}\n","import type { AdapterInterface, AdapterOptions } from '../../adapters/lib/defs'\nimport type { Options } from '../../defs'\nimport { compose } from '../compose'\nimport { debug } from '../debug'\nimport { error } from '../errors'\nimport { timeout } from '../timeout'\nimport { withResolvers, type Resolvers } from '../with-resolvers'\nimport { defaultRateLimit } from './rate-limiting'\n\ntype UpdateMap = Map<string, string | null>\ntype TransitionSet = Set<React.TransitionStartFunction>\nexport type UpdateQueueAdapterContext = Pick<\n  AdapterInterface,\n  | 'updateUrl'\n  | 'getSearchParamsSnapshot'\n  | 'rateLimitFactor'\n  | 'autoResetQueueOnUpdate'\n>\n\nexport type UpdateQueuePushArgs = {\n  key: string\n  query: string | null\n  options: AdapterOptions & Pick<Options, 'startTransition'>\n}\n\nexport function getSearchParamsSnapshotFromLocation(): URLSearchParams {\n  return new URLSearchParams(location.search)\n}\n\nexport class ThrottledQueue {\n  updateMap: UpdateMap = new Map()\n  options: Required<AdapterOptions> = {\n    history: 'replace',\n    scroll: false,\n    shallow: true\n  }\n  timeMs: number = defaultRateLimit.timeMs\n  transitions: TransitionSet = new Set()\n  resolvers: Resolvers<URLSearchParams> | null = null\n  controller: AbortController | null = null\n  lastFlushedAt = 0\n\n  push(\n    { key, query, options }: UpdateQueuePushArgs,\n    timeMs: number = defaultRateLimit.timeMs\n  ): void {\n    debug('[nuqs gtq] Enqueueing %s=%s %O', key, query, options)\n    // Enqueue update\n    this.updateMap.set(key, query)\n    if (options.history === 'push') {\n      this.options.history = 'push'\n    }\n    if (options.scroll) {\n      this.options.scroll = true\n    }\n    if (options.shallow === false) {\n      this.options.shallow = false\n    }\n    if (options.startTransition) {\n      this.transitions.add(options.startTransition)\n    }\n    // Keep the maximum finite throttle value (or set if previous was Infinity)\n    if (!Number.isFinite(this.timeMs) || timeMs > this.timeMs) {\n      this.timeMs = timeMs\n    }\n  }\n\n  getQueuedQuery(key: string): string | null | undefined {\n    return this.updateMap.get(key)\n  }\n\n  flush(\n    {\n      getSearchParamsSnapshot = getSearchParamsSnapshotFromLocation,\n      rateLimitFactor = 1,\n      ...adapter\n    }: UpdateQueueAdapterContext,\n    processUrlSearchParams?: (search: URLSearchParams) => URLSearchParams\n  ): Promise<URLSearchParams> {\n    this.controller ??= new AbortController()\n    if (!Number.isFinite(this.timeMs)) {\n      debug('[nuqs gtq] Skipping flush due to throttleMs=Infinity')\n      return Promise.resolve(getSearchParamsSnapshot())\n    }\n    if (this.resolvers) {\n      // Flush already scheduled\n      return this.resolvers.promise\n    }\n    this.resolvers = withResolvers<URLSearchParams>()\n    const flushNow = () => {\n      this.lastFlushedAt = performance.now()\n      const [search, error] = this.applyPendingUpdates(\n        {\n          ...adapter,\n          autoResetQueueOnUpdate: adapter.autoResetQueueOnUpdate ?? true,\n          getSearchParamsSnapshot\n        },\n        processUrlSearchParams\n      )\n      if (error === null) {\n        this.resolvers!.resolve(search)\n      } else {\n        this.resolvers!.reject(search)\n      }\n      this.resolvers = null\n    }\n    // We run the logic on the next event loop tick to allow\n    // multiple query updates to batch in the same event loop tick\n    // and possibly set their own throttleMs value.\n    const runOnNextTick = () => {\n      const now = performance.now()\n      const timeSinceLastFlush = now - this.lastFlushedAt\n      const timeMs = this.timeMs\n      const flushInMs =\n        rateLimitFactor * Math.max(0, timeMs - timeSinceLastFlush)\n      debug(\n        `[nuqs gtq] Scheduling flush in %f ms. Throttled at %f ms (x%f)`,\n        flushInMs,\n        timeMs,\n        rateLimitFactor\n      )\n      if (flushInMs === 0) {\n        // Since we're already in the \"next tick\" from queued updates,\n        // no need to do setTimeout(0) here.\n        flushNow()\n      } else {\n        timeout(flushNow, flushInMs, this.controller!.signal)\n      }\n    }\n    timeout(runOnNextTick, 0, this.controller.signal)\n    return this.resolvers.promise\n  }\n\n  abort(): string[] {\n    this.controller?.abort()\n    this.controller = new AbortController()\n    // todo: Better abort handling\n    this.resolvers?.resolve(new URLSearchParams())\n    this.resolvers = null\n    return this.reset()\n  }\n\n  reset(): string[] {\n    const queuedKeys = Array.from(this.updateMap.keys())\n    debug(\n      '[nuqs gtq] Resetting queue %s',\n      JSON.stringify(Object.fromEntries(this.updateMap))\n    )\n    this.updateMap.clear()\n    this.transitions.clear()\n    this.options = {\n      history: 'replace',\n      scroll: false,\n      shallow: true\n    }\n    this.timeMs = defaultRateLimit.timeMs\n    return queuedKeys\n  }\n\n  applyPendingUpdates(\n    adapter: Required<Omit<UpdateQueueAdapterContext, 'rateLimitFactor'>>,\n    processUrlSearchParams?: (search: URLSearchParams) => URLSearchParams\n  ): [URLSearchParams, null | unknown] {\n    const { updateUrl, getSearchParamsSnapshot } = adapter\n    let search = getSearchParamsSnapshot()\n    debug(\n      `[nuqs gtq] Applying %d pending update(s) on top of %s`,\n      this.updateMap.size,\n      search.toString()\n    )\n    if (this.updateMap.size === 0) {\n      return [search, null]\n    }\n    // Work on a copy and clear the queue immediately\n    const items = Array.from(this.updateMap.entries())\n    const options = { ...this.options }\n    const transitions = Array.from(this.transitions)\n    // Let the adapters choose whether to reset, as it depends on how they\n    // handle concurrent rendering (see the life-and-death.cy.ts e2e test).\n    if (adapter.autoResetQueueOnUpdate) {\n      this.reset()\n    }\n    debug('[nuqs gtq] Flushing queue %O with options %O', items, options)\n    for (const [key, value] of items) {\n      if (value === null) {\n        search.delete(key)\n      } else {\n        search.set(key, value)\n      }\n    }\n    if (processUrlSearchParams) {\n      search = processUrlSearchParams(search)\n    }\n    try {\n      compose(transitions, () => {\n        updateUrl(search, options)\n      })\n      return [search, null]\n    } catch (err) {\n      // This may fail due to rate-limiting of history methods,\n      // for example Safari only allows 100 updates in a 30s window.\n      console.error(error(429), items.map(([key]) => key).join(), err)\n      return [search, err]\n    }\n  }\n}\n\nexport const globalThrottleQueue: ThrottledQueue = new ThrottledQueue()\n","import { useCallback, useRef, useSyncExternalStore } from 'react'\n\n/**\n * Like `useSyncExternalStore`, but for subscribing to multiple keys.\n *\n * Each key becomes the key of the returned object,\n * and the value is the result of calling `getKeySnapshot` with that key.\n *\n * @param keys - A list of keys to subscribe to.\n * @param subscribeKey - A function that takes a key and a callback,\n * subscribes to an external store using that key (calling the callback when\n * state changes occur), and returns a function to unsubscribe from that key.\n * @param getKeySnapshot - A function that takes a key and returns the snapshot for that key.\n * It will be called on the server and on the client, so it needs to handle both\n * environments.\n */\nexport function useSyncExternalStores<T>(\n  keys: string[],\n  subscribeKey: (key: string, callback: () => void) => () => void,\n  getKeySnapshot: (key: string) => T\n): Record<string, T> {\n  const snapshot = useCallback((): [string, Record<string, T>] => {\n    const record = Object.fromEntries(\n      keys.map(key => [key, getKeySnapshot(key)])\n    )\n    const cacheKey = JSON.stringify(record)\n    return [cacheKey, record]\n  }, [keys.join(','), getKeySnapshot])\n  const cacheRef = useRef<null | [string, Record<string, T>]>(null)\n  // Initialize the cache with the initial snapshot\n  if (cacheRef.current === null) {\n    cacheRef.current = snapshot()\n  }\n  const subscribe = useCallback(\n    (callback: () => void) => {\n      const off = keys.map(key => subscribeKey(key, callback))\n      return () => off.forEach(unsubscribe => unsubscribe())\n    },\n    [keys.join(','), subscribeKey]\n  )\n  return useSyncExternalStore<Record<string, T>>(\n    subscribe,\n    () => {\n      const [cacheKey, record] = snapshot()\n      if (cacheRef.current![0] === cacheKey) {\n        return cacheRef.current![1]!\n      }\n      cacheRef.current = [cacheKey, record]\n      return record\n    },\n    () => cacheRef.current![1]!\n  )\n}\n","import { debug } from '../debug'\nimport { createEmitter, type Emitter } from '../emitter'\nimport { timeout } from '../timeout'\nimport { withResolvers, type Resolvers } from '../with-resolvers'\nimport {\n  getSearchParamsSnapshotFromLocation,\n  globalThrottleQueue,\n  ThrottledQueue,\n  type UpdateQueueAdapterContext,\n  type UpdateQueuePushArgs\n} from './throttle'\nimport { useSyncExternalStores } from './useSyncExternalStores'\n\nexport class DebouncedPromiseQueue<ValueType, OutputType> {\n  callback: (value: ValueType) => Promise<OutputType>\n  resolvers: Resolvers<OutputType> = withResolvers<OutputType>()\n  controller: AbortController = new AbortController()\n  queuedValue: ValueType | undefined = undefined\n\n  constructor(callback: (value: ValueType) => Promise<OutputType>) {\n    this.callback = callback\n  }\n\n  abort(): void {\n    this.controller.abort()\n    this.queuedValue = undefined\n  }\n\n  push(value: ValueType, timeMs: number): Promise<OutputType> {\n    this.queuedValue = value\n    this.controller.abort()\n    this.controller = new AbortController()\n    timeout(\n      () => {\n        // Keep the resolvers in a separate variable to reset the queue\n        // while the callback is pending, so that the next push can be\n        // assigned to a new Promise (and not dropped).\n        const outputResolvers = this.resolvers\n        try {\n          debug('[nuqs dq] Flushing debounce queue', value)\n          const callbackPromise = this.callback(value)\n          debug('[nuqs dq] Reset debounce queue %O', this.queuedValue)\n          this.queuedValue = undefined\n          this.resolvers = withResolvers<OutputType>()\n          callbackPromise\n            .then(output => outputResolvers.resolve(output))\n            .catch(error => outputResolvers.reject(error))\n        } catch (error) {\n          this.queuedValue = undefined\n          outputResolvers.reject(error)\n        }\n      },\n      timeMs,\n      this.controller.signal\n    )\n    return this.resolvers.promise\n  }\n}\n\n// --\n\ntype DebouncedUpdateQueue = DebouncedPromiseQueue<\n  Omit<UpdateQueuePushArgs, 'timeMs'>,\n  URLSearchParams\n>\n\nexport class DebounceController {\n  throttleQueue: ThrottledQueue\n  queues: Map<string, DebouncedUpdateQueue> = new Map()\n  queuedQuerySync: Emitter<Record<string, undefined>> = createEmitter()\n\n  constructor(throttleQueue: ThrottledQueue = new ThrottledQueue()) {\n    this.throttleQueue = throttleQueue\n  }\n\n  useQueuedQueries(keys: string[]): Record<string, string | null | undefined> {\n    return useSyncExternalStores(\n      keys,\n      (key, callback) => this.queuedQuerySync.on(key, callback),\n      (key: string) => this.getQueuedQuery(key)\n    )\n  }\n\n  push(\n    update: Omit<UpdateQueuePushArgs, 'timeMs'>,\n    timeMs: number,\n    adapter: UpdateQueueAdapterContext\n  ): Promise<URLSearchParams> {\n    if (!Number.isFinite(timeMs)) {\n      const getSnapshot =\n        adapter.getSearchParamsSnapshot ?? getSearchParamsSnapshotFromLocation\n      return Promise.resolve(getSnapshot())\n    }\n    const key = update.key\n    if (!this.queues.has(key)) {\n      debug('[nuqs dqc] Creating debounce queue for `%s`', key)\n      const queue = new DebouncedPromiseQueue<\n        Omit<UpdateQueuePushArgs, 'timeMs'>,\n        URLSearchParams\n      >(update => {\n        this.throttleQueue.push(update)\n        return this.throttleQueue.flush(adapter).finally(() => {\n          const queuedValue = this.queues.get(update.key)?.queuedValue\n          if (queuedValue === undefined) {\n            debug('[nuqs dqc] Cleaning up empty queue for `%s`', update.key)\n            this.queues.delete(update.key)\n          }\n          this.queuedQuerySync.emit(update.key)\n        })\n      })\n      this.queues.set(key, queue)\n    }\n    debug('[nuqs dqc] Enqueueing debounce update %O', update)\n    const promise = this.queues.get(key)!.push(update, timeMs)\n    this.queuedQuerySync.emit(key)\n    return promise\n  }\n\n  abort(\n    key: string\n  ): (promise: Promise<URLSearchParams>) => Promise<URLSearchParams> {\n    const queue = this.queues.get(key)\n    if (!queue) {\n      return passThrough => passThrough\n    }\n    debug(\n      '[nuqs dqc] Aborting debounce queue %s=%s',\n      key,\n      queue.queuedValue?.query\n    )\n    this.queues.delete(key)\n    queue.abort() // Don't run to completion\n    this.queuedQuerySync.emit(key)\n    return promise => {\n      promise.then(queue.resolvers.resolve, queue.resolvers.reject)\n      // Don't chain: keep reference equality\n      return promise\n    }\n  }\n\n  abortAll(): void {\n    for (const [key, queue] of this.queues.entries()) {\n      debug(\n        '[nuqs dqc] Aborting debounce queue %s=%s',\n        key,\n        queue.queuedValue?.query\n      )\n      queue.abort()\n      // todo: Better abort handling\n      queue.resolvers.resolve(new URLSearchParams()) // Don't leave the Promise pending\n      this.queuedQuerySync.emit(key)\n    }\n    this.queues.clear()\n  }\n\n  getQueuedQuery(key: string): string | null | undefined {\n    // The debounced queued values are more likely to be up-to-date\n    // than any updates pending in the throttle queue, which comes last\n    // in the update chain.\n    const debouncedQueued = this.queues.get(key)?.queuedValue?.query\n    if (debouncedQueued !== undefined) {\n      return debouncedQueued\n    }\n    return this.throttleQueue.getQueuedQuery(key)\n  }\n}\n\nexport const debounceController: DebounceController = new DebounceController(\n  globalThrottleQueue\n)\n"],"mappings":"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"}