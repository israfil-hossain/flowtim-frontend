{
  "version": 3,
  "sources": ["../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/debug.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/errors.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/url-encoding.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/adapters/lib/context.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/queues/rate-limiting.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/emitter.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/timeout.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/with-resolvers.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/compose.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/queues/throttle.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/queues/useSyncExternalStores.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/queues/debounce.ts"],
  "sourcesContent": ["export const debugEnabled: boolean = isDebugEnabled()\n\nexport function debug(message: string, ...args: any[]): void {\n  if (!debugEnabled) {\n    return\n  }\n  const msg = sprintf(message, ...args)\n  performance.mark(msg)\n  try {\n    // Handle React Devtools not being able to console.log('%s', null)\n    console.log(message, ...args)\n  } catch {\n    console.log(msg)\n  }\n}\n\nexport function warn(message: string, ...args: any[]): void {\n  if (!debugEnabled) {\n    return\n  }\n  console.warn(message, ...args)\n}\n\nexport function sprintf(base: string, ...args: any[]): string {\n  return base.replace(/%[sfdO]/g, match => {\n    const arg = args.shift()\n    return match === '%O' && arg\n      ? JSON.stringify(arg).replace(/\"([^\"]+)\":/g, '$1:')\n      : String(arg)\n  })\n}\n\nfunction isDebugEnabled(): boolean {\n  // Check if localStorage is available.\n  // It may be unavailable in some environments,\n  // like Safari in private browsing mode.\n  // See https://github.com/47ng/nuqs/pull/588\n  try {\n    const test = 'nuqs-localStorage-test'\n    if (typeof localStorage === 'undefined') {\n      return false\n    }\n    localStorage.setItem(test, test)\n    const isStorageAvailable = localStorage.getItem(test) === test\n    localStorage.removeItem(test)\n    return (\n      isStorageAvailable &&\n      (localStorage.getItem('debug') || '').includes('nuqs')\n    )\n  } catch {\n    return false\n  }\n}\n", "export const errors = {\n  303: 'Multiple adapter contexts detected. This might happen in monorepos.',\n  404: 'nuqs requires an adapter to work with your framework.',\n  409: 'Multiple versions of the library are loaded. This may lead to unexpected behavior. Currently using `%s`, but `%s` (via the %s adapter) was about to load on top.',\n  414: 'Max safe URL length exceeded. Some browsers may not be able to accept this URL. Consider limiting the amount of state stored in the URL.',\n  422: 'Invalid options combination: `limitUrlUpdates: debounce` should be used in SSR scenarios, with `shallow: false`',\n  429: 'URL update rate-limited by the browser. Consider increasing `throttleMs` for key(s) `%s`. %O',\n  500: \"Empty search params cache. Search params can't be accessed in Layouts.\",\n  501: 'Search params cache already populated. Have you called `parse` twice?'\n} as const\n\nexport function error(code: keyof typeof errors) {\n  return `[nuqs] ${errors[code]}\n  See https://err.47ng.com/NUQS-${code}`\n}\n", "import { error } from './errors'\n\nexport function renderQueryString(search: URLSearchParams): string {\n  if (search.size === 0) {\n    return ''\n  }\n  const query: string[] = []\n  for (const [key, value] of search.entries()) {\n    // Replace disallowed characters in keys,\n    // see https://github.com/47ng/nuqs/issues/599\n    const safeKey = key\n      .replace(/#/g, '%23')\n      .replace(/&/g, '%26')\n      .replace(/\\+/g, '%2B')\n      .replace(/=/g, '%3D')\n      .replace(/\\?/g, '%3F')\n    query.push(`${safeKey}=${encodeQueryValue(value)}`)\n  }\n  const queryString = '?' + query.join('&')\n  warnIfURLIsTooLong(queryString)\n  return queryString\n}\n\nexport function encodeQueryValue(input: string): string {\n  return (\n    input\n      // Encode existing % signs first to avoid appearing\n      // as an incomplete escape sequence:\n      .replace(/%/g, '%25')\n      // Note: spaces are encoded as + in RFC 3986,\n      // so we pre-encode existing + signs to avoid confusion\n      // before converting spaces to + signs.\n      .replace(/\\+/g, '%2B')\n      .replace(/ /g, '+')\n      // Encode other URI-reserved characters\n      .replace(/#/g, '%23')\n      .replace(/&/g, '%26')\n      // Encode characters that break URL detection on some platforms\n      // and would drop the tail end of the querystring:\n      .replace(/\"/g, '%22')\n      .replace(/'/g, '%27')\n      .replace(/`/g, '%60')\n      .replace(/</g, '%3C')\n      .replace(/>/g, '%3E')\n      // Encode invisible ASCII control characters\n      .replace(/[\\x00-\\x1F]/g, char => encodeURIComponent(char))\n  )\n}\n\n// Note: change error documentation (NUQS-414) when changing this value.\nexport const URL_MAX_LENGTH = 2000\n\nexport function warnIfURLIsTooLong(queryString: string): void {\n  if (process.env.NODE_ENV === 'production') {\n    return\n  }\n  if (typeof location === 'undefined') {\n    return\n  }\n  const url = new URL(location.href)\n  url.search = queryString\n  if (url.href.length > URL_MAX_LENGTH) {\n    console.warn(error(414))\n  }\n}\n", "import {\n  createContext,\n  createElement,\n  useContext,\n  type Context,\n  type ProviderProps,\n  type ReactElement,\n  type ReactNode\n} from 'react'\nimport type { Options } from '../../defs'\nimport { debugEnabled } from '../../lib/debug'\nimport { error } from '../../lib/errors'\nimport type { AdapterInterface, UseAdapterHook } from './defs'\n\nexport type AdapterProps = {\n  defaultOptions?: Partial<\n    Pick<Options, 'shallow' | 'clearOnDefault' | 'scroll' | 'limitUrlUpdates'>\n  >\n  processUrlSearchParams?: (search: URLSearchParams) => URLSearchParams\n}\n\nexport type AdapterContext = AdapterProps & {\n  useAdapter: UseAdapterHook\n}\n\nexport const context: Context<AdapterContext> = createContext<AdapterContext>({\n  useAdapter() {\n    throw new Error(error(404))\n  }\n})\ncontext.displayName = 'NuqsAdapterContext'\n\ndeclare global {\n  interface Window {\n    __NuqsAdapterContext?: typeof context\n  }\n}\n\nif (debugEnabled && typeof window !== 'undefined') {\n  if (window.__NuqsAdapterContext && window.__NuqsAdapterContext !== context) {\n    console.error(error(303))\n  }\n  window.__NuqsAdapterContext = context\n}\n\nexport type AdapterProvider = (\n  props: AdapterProps & {\n    children: ReactNode\n  }\n) => ReactElement<ProviderProps<AdapterContext>>\n\n/**\n * Create a custom adapter (context provider) for nuqs to work with your framework / router.\n *\n * Adapters are based on React Context,\n *\n * @param useAdapter\n * @returns\n */\nexport function createAdapterProvider(\n  useAdapter: UseAdapterHook\n): AdapterProvider {\n  return ({ children, defaultOptions, processUrlSearchParams, ...props }) =>\n    createElement(\n      context.Provider,\n      {\n        ...props,\n        value: { useAdapter, defaultOptions, processUrlSearchParams }\n      },\n      children\n    )\n}\n\nexport function useAdapter(watchKeys: string[]): AdapterInterface {\n  const value = useContext(context)\n  if (!('useAdapter' in value)) {\n    throw new Error(error(404))\n  }\n  return value.useAdapter(watchKeys)\n}\n\nexport const useAdapterDefaultOptions = (): AdapterProps['defaultOptions'] =>\n  useContext(context).defaultOptions\n\nexport const useAdapterProcessUrlSearchParams =\n  (): AdapterProps['processUrlSearchParams'] =>\n    useContext(context).processUrlSearchParams\n", "import type { LimitUrlUpdates } from '../../defs'\n\n// 50ms between calls to the history API seems to satisfy Chrome and Firefox.\n// Safari remains annoying with at most 100 calls in 30 seconds.\n// edit: Safari 17 now allows 100 calls per 10 seconds, a bit better.\nfunction getDefaultThrottle() {\n  if (typeof window === 'undefined') return 50\n  // https://stackoverflow.com/questions/7944460/detect-safari-browser\n  // @ts-expect-error\n  const isSafari = Boolean(window.GestureEvent)\n  if (!isSafari) {\n    return 50\n  }\n  try {\n    const match = navigator.userAgent?.match(/version\\/([\\d\\.]+) safari/i)\n    return parseFloat(match![1]!) >= 17 ? 120 : 320\n  } catch {\n    return 320\n  }\n}\n\nexport function throttle(timeMs: number): LimitUrlUpdates {\n  return { method: 'throttle', timeMs }\n}\n\nexport function debounce(timeMs: number): LimitUrlUpdates {\n  return { method: 'debounce', timeMs }\n}\n\nexport const defaultRateLimit: LimitUrlUpdates = throttle(getDefaultThrottle())\n", "export type Emitter<Events extends Record<string, unknown>> = {\n  on<Key extends keyof Events>(\n    type: Key,\n    handler: (event: Events[Key]) => any\n  ): () => void\n  off<Key extends keyof Events>(\n    type: Key,\n    handler?: (event: Events[Key]) => any\n  ): void\n  emit<Key extends keyof Events>(\n    type: Key,\n    event?: Events[Key] extends undefined ? never : Events[Key]\n  ): void\n  all: Map<keyof Events, Array<(event: Events[keyof Events]) => any>>\n}\n\nexport function createEmitter<\n  Events extends Record<string, unknown>\n>(): Emitter<Events> {\n  const all: Map<\n    keyof Events,\n    Array<(event: Events[keyof Events]) => any>\n  > = new Map()\n  return {\n    all,\n    on<Key extends keyof Events>(\n      type: Key,\n      handler: (event: Events[Key]) => any\n    ): () => void {\n      const handlers = all.get(type) || []\n      handlers.push(handler as (event: Events[keyof Events]) => any)\n      all.set(type, handlers)\n      return () => this.off(type, handler)\n    },\n    off<Key extends keyof Events>(\n      type: Key,\n      handler: (event: Events[Key]) => any\n    ): void {\n      const handlers = all.get(type)\n      if (handlers) {\n        all.set(\n          type,\n          handlers.filter(h => h !== handler)\n        )\n      }\n    },\n    emit<Key extends keyof Events>(\n      type: Key,\n      event?: Events[Key] extends undefined ? never : Events[Key]\n    ): void {\n      const handlers = all.get(type)\n      handlers?.forEach(handler => handler(event as Events[keyof Events]))\n    }\n  }\n}\n", "// Source:\n// https://www.bennadel.com/blog/4195-using-abortcontroller-to-debounce-settimeout-calls-in-javascript.htm\n\nexport function timeout(\n  callback: () => void,\n  ms: number,\n  signal: AbortSignal\n): void {\n  function onTick() {\n    callback()\n    signal.removeEventListener('abort', onAbort)\n  }\n  const id = setTimeout(onTick, ms)\n  function onAbort() {\n    clearTimeout(id)\n    signal.removeEventListener('abort', onAbort)\n  }\n  signal.addEventListener('abort', onAbort)\n}\n", "export type Resolvers<T> = {\n  promise: Promise<T>\n  resolve: (value: T | PromiseLike<T>) => void\n  reject: (reason?: any) => void\n}\n\nexport function withResolvers<T>(): Resolvers<T> {\n  const P = Promise<T>\n  if (Promise.hasOwnProperty('withResolvers')) {\n    return Promise.withResolvers<T>()\n  }\n  // todo: Remove this once Promise.withResolvers is Baseline GA (September 2026)\n  let resolve: (value: T | PromiseLike<T>) => void = () => {}\n  let reject: () => void = () => {}\n  const promise = new P((res, rej) => {\n    resolve = res\n    reject = rej\n  })\n  return { promise, resolve, reject }\n}\n", "export function compose(\n  fns: React.TransitionStartFunction[],\n  final: () => void\n): void {\n  // Build a nested callback chain iteratively (avoids recursion helper)\n  let next = final\n  for (let i = fns.length - 1; i >= 0; i--) {\n    const fn = fns[i]\n    if (!fn) continue\n    const prev = next\n    next = () => fn(prev)\n  }\n  next()\n}\n", "import type { AdapterInterface, AdapterOptions } from '../../adapters/lib/defs'\nimport type { Options } from '../../defs'\nimport { compose } from '../compose'\nimport { debug } from '../debug'\nimport { error } from '../errors'\nimport { timeout } from '../timeout'\nimport { withResolvers, type Resolvers } from '../with-resolvers'\nimport { defaultRateLimit } from './rate-limiting'\n\ntype UpdateMap = Map<string, string | null>\ntype TransitionSet = Set<React.TransitionStartFunction>\nexport type UpdateQueueAdapterContext = Pick<\n  AdapterInterface,\n  | 'updateUrl'\n  | 'getSearchParamsSnapshot'\n  | 'rateLimitFactor'\n  | 'autoResetQueueOnUpdate'\n>\n\nexport type UpdateQueuePushArgs = {\n  key: string\n  query: string | null\n  options: AdapterOptions & Pick<Options, 'startTransition'>\n}\n\nexport function getSearchParamsSnapshotFromLocation(): URLSearchParams {\n  return new URLSearchParams(location.search)\n}\n\nexport class ThrottledQueue {\n  updateMap: UpdateMap = new Map()\n  options: Required<AdapterOptions> = {\n    history: 'replace',\n    scroll: false,\n    shallow: true\n  }\n  timeMs: number = defaultRateLimit.timeMs\n  transitions: TransitionSet = new Set()\n  resolvers: Resolvers<URLSearchParams> | null = null\n  controller: AbortController | null = null\n  lastFlushedAt = 0\n\n  push(\n    { key, query, options }: UpdateQueuePushArgs,\n    timeMs: number = defaultRateLimit.timeMs\n  ): void {\n    debug('[nuqs gtq] Enqueueing %s=%s %O', key, query, options)\n    // Enqueue update\n    this.updateMap.set(key, query)\n    if (options.history === 'push') {\n      this.options.history = 'push'\n    }\n    if (options.scroll) {\n      this.options.scroll = true\n    }\n    if (options.shallow === false) {\n      this.options.shallow = false\n    }\n    if (options.startTransition) {\n      this.transitions.add(options.startTransition)\n    }\n    // Keep the maximum finite throttle value (or set if previous was Infinity)\n    if (!Number.isFinite(this.timeMs) || timeMs > this.timeMs) {\n      this.timeMs = timeMs\n    }\n  }\n\n  getQueuedQuery(key: string): string | null | undefined {\n    return this.updateMap.get(key)\n  }\n\n  flush(\n    {\n      getSearchParamsSnapshot = getSearchParamsSnapshotFromLocation,\n      rateLimitFactor = 1,\n      ...adapter\n    }: UpdateQueueAdapterContext,\n    processUrlSearchParams?: (search: URLSearchParams) => URLSearchParams\n  ): Promise<URLSearchParams> {\n    this.controller ??= new AbortController()\n    if (!Number.isFinite(this.timeMs)) {\n      debug('[nuqs gtq] Skipping flush due to throttleMs=Infinity')\n      return Promise.resolve(getSearchParamsSnapshot())\n    }\n    if (this.resolvers) {\n      // Flush already scheduled\n      return this.resolvers.promise\n    }\n    this.resolvers = withResolvers<URLSearchParams>()\n    const flushNow = () => {\n      this.lastFlushedAt = performance.now()\n      const [search, error] = this.applyPendingUpdates(\n        {\n          ...adapter,\n          autoResetQueueOnUpdate: adapter.autoResetQueueOnUpdate ?? true,\n          getSearchParamsSnapshot\n        },\n        processUrlSearchParams\n      )\n      if (error === null) {\n        this.resolvers!.resolve(search)\n      } else {\n        this.resolvers!.reject(search)\n      }\n      this.resolvers = null\n    }\n    // We run the logic on the next event loop tick to allow\n    // multiple query updates to batch in the same event loop tick\n    // and possibly set their own throttleMs value.\n    const runOnNextTick = () => {\n      const now = performance.now()\n      const timeSinceLastFlush = now - this.lastFlushedAt\n      const timeMs = this.timeMs\n      const flushInMs =\n        rateLimitFactor * Math.max(0, timeMs - timeSinceLastFlush)\n      debug(\n        `[nuqs gtq] Scheduling flush in %f ms. Throttled at %f ms (x%f)`,\n        flushInMs,\n        timeMs,\n        rateLimitFactor\n      )\n      if (flushInMs === 0) {\n        // Since we're already in the \"next tick\" from queued updates,\n        // no need to do setTimeout(0) here.\n        flushNow()\n      } else {\n        timeout(flushNow, flushInMs, this.controller!.signal)\n      }\n    }\n    timeout(runOnNextTick, 0, this.controller.signal)\n    return this.resolvers.promise\n  }\n\n  abort(): string[] {\n    this.controller?.abort()\n    this.controller = new AbortController()\n    // todo: Better abort handling\n    this.resolvers?.resolve(new URLSearchParams())\n    this.resolvers = null\n    return this.reset()\n  }\n\n  reset(): string[] {\n    const queuedKeys = Array.from(this.updateMap.keys())\n    debug(\n      '[nuqs gtq] Resetting queue %s',\n      JSON.stringify(Object.fromEntries(this.updateMap))\n    )\n    this.updateMap.clear()\n    this.transitions.clear()\n    this.options = {\n      history: 'replace',\n      scroll: false,\n      shallow: true\n    }\n    this.timeMs = defaultRateLimit.timeMs\n    return queuedKeys\n  }\n\n  applyPendingUpdates(\n    adapter: Required<Omit<UpdateQueueAdapterContext, 'rateLimitFactor'>>,\n    processUrlSearchParams?: (search: URLSearchParams) => URLSearchParams\n  ): [URLSearchParams, null | unknown] {\n    const { updateUrl, getSearchParamsSnapshot } = adapter\n    let search = getSearchParamsSnapshot()\n    debug(\n      `[nuqs gtq] Applying %d pending update(s) on top of %s`,\n      this.updateMap.size,\n      search.toString()\n    )\n    if (this.updateMap.size === 0) {\n      return [search, null]\n    }\n    // Work on a copy and clear the queue immediately\n    const items = Array.from(this.updateMap.entries())\n    const options = { ...this.options }\n    const transitions = Array.from(this.transitions)\n    // Let the adapters choose whether to reset, as it depends on how they\n    // handle concurrent rendering (see the life-and-death.cy.ts e2e test).\n    if (adapter.autoResetQueueOnUpdate) {\n      this.reset()\n    }\n    debug('[nuqs gtq] Flushing queue %O with options %O', items, options)\n    for (const [key, value] of items) {\n      if (value === null) {\n        search.delete(key)\n      } else {\n        search.set(key, value)\n      }\n    }\n    if (processUrlSearchParams) {\n      search = processUrlSearchParams(search)\n    }\n    try {\n      compose(transitions, () => {\n        updateUrl(search, options)\n      })\n      return [search, null]\n    } catch (err) {\n      // This may fail due to rate-limiting of history methods,\n      // for example Safari only allows 100 updates in a 30s window.\n      console.error(error(429), items.map(([key]) => key).join(), err)\n      return [search, err]\n    }\n  }\n}\n\nexport const globalThrottleQueue: ThrottledQueue = new ThrottledQueue()\n", "import { useCallback, useRef, useSyncExternalStore } from 'react'\n\n/**\n * Like `useSyncExternalStore`, but for subscribing to multiple keys.\n *\n * Each key becomes the key of the returned object,\n * and the value is the result of calling `getKeySnapshot` with that key.\n *\n * @param keys - A list of keys to subscribe to.\n * @param subscribeKey - A function that takes a key and a callback,\n * subscribes to an external store using that key (calling the callback when\n * state changes occur), and returns a function to unsubscribe from that key.\n * @param getKeySnapshot - A function that takes a key and returns the snapshot for that key.\n * It will be called on the server and on the client, so it needs to handle both\n * environments.\n */\nexport function useSyncExternalStores<T>(\n  keys: string[],\n  subscribeKey: (key: string, callback: () => void) => () => void,\n  getKeySnapshot: (key: string) => T\n): Record<string, T> {\n  const snapshot = useCallback((): [string, Record<string, T>] => {\n    const record = Object.fromEntries(\n      keys.map(key => [key, getKeySnapshot(key)])\n    )\n    const cacheKey = JSON.stringify(record)\n    return [cacheKey, record]\n  }, [keys.join(','), getKeySnapshot])\n  const cacheRef = useRef<null | [string, Record<string, T>]>(null)\n  // Initialize the cache with the initial snapshot\n  if (cacheRef.current === null) {\n    cacheRef.current = snapshot()\n  }\n  const subscribe = useCallback(\n    (callback: () => void) => {\n      const off = keys.map(key => subscribeKey(key, callback))\n      return () => off.forEach(unsubscribe => unsubscribe())\n    },\n    [keys.join(','), subscribeKey]\n  )\n  return useSyncExternalStore<Record<string, T>>(\n    subscribe,\n    () => {\n      const [cacheKey, record] = snapshot()\n      if (cacheRef.current![0] === cacheKey) {\n        return cacheRef.current![1]!\n      }\n      cacheRef.current = [cacheKey, record]\n      return record\n    },\n    () => cacheRef.current![1]!\n  )\n}\n", "import { debug } from '../debug'\nimport { createEmitter, type Emitter } from '../emitter'\nimport { timeout } from '../timeout'\nimport { withResolvers, type Resolvers } from '../with-resolvers'\nimport {\n  getSearchParamsSnapshotFromLocation,\n  globalThrottleQueue,\n  ThrottledQueue,\n  type UpdateQueueAdapterContext,\n  type UpdateQueuePushArgs\n} from './throttle'\nimport { useSyncExternalStores } from './useSyncExternalStores'\n\nexport class DebouncedPromiseQueue<ValueType, OutputType> {\n  callback: (value: ValueType) => Promise<OutputType>\n  resolvers: Resolvers<OutputType> = withResolvers<OutputType>()\n  controller: AbortController = new AbortController()\n  queuedValue: ValueType | undefined = undefined\n\n  constructor(callback: (value: ValueType) => Promise<OutputType>) {\n    this.callback = callback\n  }\n\n  abort(): void {\n    this.controller.abort()\n    this.queuedValue = undefined\n  }\n\n  push(value: ValueType, timeMs: number): Promise<OutputType> {\n    this.queuedValue = value\n    this.controller.abort()\n    this.controller = new AbortController()\n    timeout(\n      () => {\n        // Keep the resolvers in a separate variable to reset the queue\n        // while the callback is pending, so that the next push can be\n        // assigned to a new Promise (and not dropped).\n        const outputResolvers = this.resolvers\n        try {\n          debug('[nuqs dq] Flushing debounce queue', value)\n          const callbackPromise = this.callback(value)\n          debug('[nuqs dq] Reset debounce queue %O', this.queuedValue)\n          this.queuedValue = undefined\n          this.resolvers = withResolvers<OutputType>()\n          callbackPromise\n            .then(output => outputResolvers.resolve(output))\n            .catch(error => outputResolvers.reject(error))\n        } catch (error) {\n          this.queuedValue = undefined\n          outputResolvers.reject(error)\n        }\n      },\n      timeMs,\n      this.controller.signal\n    )\n    return this.resolvers.promise\n  }\n}\n\n// --\n\ntype DebouncedUpdateQueue = DebouncedPromiseQueue<\n  Omit<UpdateQueuePushArgs, 'timeMs'>,\n  URLSearchParams\n>\n\nexport class DebounceController {\n  throttleQueue: ThrottledQueue\n  queues: Map<string, DebouncedUpdateQueue> = new Map()\n  queuedQuerySync: Emitter<Record<string, undefined>> = createEmitter()\n\n  constructor(throttleQueue: ThrottledQueue = new ThrottledQueue()) {\n    this.throttleQueue = throttleQueue\n  }\n\n  useQueuedQueries(keys: string[]): Record<string, string | null | undefined> {\n    return useSyncExternalStores(\n      keys,\n      (key, callback) => this.queuedQuerySync.on(key, callback),\n      (key: string) => this.getQueuedQuery(key)\n    )\n  }\n\n  push(\n    update: Omit<UpdateQueuePushArgs, 'timeMs'>,\n    timeMs: number,\n    adapter: UpdateQueueAdapterContext\n  ): Promise<URLSearchParams> {\n    if (!Number.isFinite(timeMs)) {\n      const getSnapshot =\n        adapter.getSearchParamsSnapshot ?? getSearchParamsSnapshotFromLocation\n      return Promise.resolve(getSnapshot())\n    }\n    const key = update.key\n    if (!this.queues.has(key)) {\n      debug('[nuqs dqc] Creating debounce queue for `%s`', key)\n      const queue = new DebouncedPromiseQueue<\n        Omit<UpdateQueuePushArgs, 'timeMs'>,\n        URLSearchParams\n      >(update => {\n        this.throttleQueue.push(update)\n        return this.throttleQueue.flush(adapter).finally(() => {\n          const queuedValue = this.queues.get(update.key)?.queuedValue\n          if (queuedValue === undefined) {\n            debug('[nuqs dqc] Cleaning up empty queue for `%s`', update.key)\n            this.queues.delete(update.key)\n          }\n          this.queuedQuerySync.emit(update.key)\n        })\n      })\n      this.queues.set(key, queue)\n    }\n    debug('[nuqs dqc] Enqueueing debounce update %O', update)\n    const promise = this.queues.get(key)!.push(update, timeMs)\n    this.queuedQuerySync.emit(key)\n    return promise\n  }\n\n  abort(\n    key: string\n  ): (promise: Promise<URLSearchParams>) => Promise<URLSearchParams> {\n    const queue = this.queues.get(key)\n    if (!queue) {\n      return passThrough => passThrough\n    }\n    debug(\n      '[nuqs dqc] Aborting debounce queue %s=%s',\n      key,\n      queue.queuedValue?.query\n    )\n    this.queues.delete(key)\n    queue.abort() // Don't run to completion\n    this.queuedQuerySync.emit(key)\n    return promise => {\n      promise.then(queue.resolvers.resolve, queue.resolvers.reject)\n      // Don't chain: keep reference equality\n      return promise\n    }\n  }\n\n  abortAll(): void {\n    for (const [key, queue] of this.queues.entries()) {\n      debug(\n        '[nuqs dqc] Aborting debounce queue %s=%s',\n        key,\n        queue.queuedValue?.query\n      )\n      queue.abort()\n      // todo: Better abort handling\n      queue.resolvers.resolve(new URLSearchParams()) // Don't leave the Promise pending\n      this.queuedQuerySync.emit(key)\n    }\n    this.queues.clear()\n  }\n\n  getQueuedQuery(key: string): string | null | undefined {\n    // The debounced queued values are more likely to be up-to-date\n    // than any updates pending in the throttle queue, which comes last\n    // in the update chain.\n    const debouncedQueued = this.queues.get(key)?.queuedValue?.query\n    if (debouncedQueued !== undefined) {\n      return debouncedQueued\n    }\n    return this.throttleQueue.getQueuedQuery(key)\n  }\n}\n\nexport const debounceController: DebounceController = new DebounceController(\n  globalThrottleQueue\n)\n"],
  "mappings": "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",
  "names": ["debugEnabled: boolean", "query: string[]", "context: Context<AdapterContext>", "defaultRateLimit: LimitUrlUpdates", "all: Map<\n    keyof Events,\n    Array<(event: Events[keyof Events]) => any>\n  >", "resolve: (value: T | PromiseLike<T>) => void", "reject: () => void", "error", "globalThrottleQueue: ThrottledQueue", "update", "debounceController: DebounceController"]
}
