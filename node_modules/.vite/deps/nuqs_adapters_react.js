"use client";
import {
  createAdapterProvider,
  createEmitter,
  debounceController,
  debug,
  error,
  globalThrottleQueue,
  renderQueryString
} from "./chunk-52OHABRI.js";
import {
  require_react
} from "./chunk-EGKDWVYF.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/dist/key-isolation-CqapOYhu.js
function applyChange(newValue, keys, copy) {
  return (oldValue) => {
    const hasChanged = keys.length === 0 ? true : keys.some((key) => oldValue.get(key) !== newValue.get(key));
    if (!hasChanged) {
      debug("[nuqs `%s`] no change, returning previous", keys.join(","), oldValue);
      return oldValue;
    }
    const filtered = filterSearchParams(newValue, keys, copy);
    debug(`[nuqs \`%s\`] subbed search params change
  from %O
  to   %O`, keys.join(","), oldValue, filtered);
    return filtered;
  };
}
function filterSearchParams(search, keys, copy) {
  if (keys.length === 0) return search;
  const filtered = copy ? new URLSearchParams(search) : search;
  for (const key of search.keys()) if (!keys.includes(key)) filtered.delete(key);
  return filtered;
}

// node_modules/.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/dist/reset-DAVNyB3X.js
var mutex = 0;
function spinQueueResetMutex() {
  mutex = Math.max(0, mutex - 1);
  if (mutex > 0) return;
  resetQueues();
}
function resetQueues() {
  debug("[nuqs] Aborting queues");
  debounceController.abortAll();
  const abortedKeys = globalThrottleQueue.abort();
  abortedKeys.forEach((key) => debounceController.queuedQuerySync.emit(key));
}

// node_modules/.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/dist/patch-history-BwFLSVaK.js
var historyUpdateMarker = "__nuqs__";
function getSearchParams(url) {
  if (url instanceof URL) return url.searchParams;
  if (url.startsWith("?")) return new URLSearchParams(url);
  try {
    return new URL(url, location.origin).searchParams;
  } catch {
    return new URLSearchParams(url);
  }
}
function shouldPatchHistory(adapter) {
  var _a, _b, _c;
  if (typeof history === "undefined") return false;
  if (((_a = history.nuqs) == null ? void 0 : _a.version) && history.nuqs.version !== "0.0.0-inject-version-here") {
    console.error(error(409), history.nuqs.version, `0.0.0-inject-version-here`, adapter);
    return false;
  }
  if ((_c = (_b = history.nuqs) == null ? void 0 : _b.adapters) == null ? void 0 : _c.includes(adapter)) return false;
  return true;
}
function markHistoryAsPatched(adapter) {
  history.nuqs = history.nuqs ?? {
    version: "0.0.0-inject-version-here",
    adapters: []
  };
  history.nuqs.adapters.push(adapter);
}
function patchHistory(emitter2, adapter) {
  if (!shouldPatchHistory(adapter)) return;
  let lastSearchSeen = typeof location === "object" ? location.search : "";
  emitter2.on("update", (search) => {
    const searchString = search.toString();
    lastSearchSeen = searchString.length ? "?" + searchString : "";
  });
  window.addEventListener("popstate", () => {
    lastSearchSeen = location.search;
    resetQueues();
  });
  debug("[nuqs %s] Patching history (%s adapter)", "0.0.0-inject-version-here", adapter);
  function sync(url) {
    spinQueueResetMutex();
    try {
      const newSearch = new URL(url, location.origin).search;
      if (newSearch === lastSearchSeen) return;
    } catch {
    }
    try {
      emitter2.emit("update", getSearchParams(url));
    } catch (e) {
      console.error(e);
    }
  }
  const originalPushState = history.pushState;
  const originalReplaceState = history.replaceState;
  history.pushState = function nuqs_pushState(state, marker, url) {
    originalPushState.call(history, state, "", url);
    if (url && marker !== historyUpdateMarker) sync(url);
  };
  history.replaceState = function nuqs_replaceState(state, marker, url) {
    originalReplaceState.call(history, state, "", url);
    if (url && marker !== historyUpdateMarker) sync(url);
  };
  markHistoryAsPatched(adapter);
}

// node_modules/.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/dist/adapters/react.js
var import_react = __toESM(require_react());
var emitter = createEmitter();
function generateUpdateUrlFn(fullPageNavigationOnShallowFalseUpdates) {
  return function updateUrl(search, options) {
    const url = new URL(location.href);
    url.search = renderQueryString(search);
    debug("[nuqs react] Updating url: %s", url);
    if (fullPageNavigationOnShallowFalseUpdates && options.shallow === false) {
      const method = options.history === "push" ? location.assign : location.replace;
      method.call(location, url);
    } else {
      const method = options.history === "push" ? history.pushState : history.replaceState;
      method.call(history, history.state, historyUpdateMarker, url);
    }
    emitter.emit("update", search);
    if (options.scroll === true) window.scrollTo({ top: 0 });
  };
}
var NuqsReactAdapterContext = (0, import_react.createContext)({ fullPageNavigationOnShallowFalseUpdates: false });
function useNuqsReactAdapter(watchKeys) {
  const { fullPageNavigationOnShallowFalseUpdates } = (0, import_react.useContext)(NuqsReactAdapterContext);
  const [searchParams, setSearchParams] = (0, import_react.useState)(() => {
    if (typeof location === "undefined") return new URLSearchParams();
    return filterSearchParams(new URLSearchParams(location.search), watchKeys, false);
  });
  (0, import_react.useEffect)(() => {
    const onPopState = () => {
      setSearchParams(applyChange(new URLSearchParams(location.search), watchKeys, false));
    };
    const onEmitterUpdate = (search) => {
      setSearchParams(applyChange(search, watchKeys, true));
    };
    emitter.on("update", onEmitterUpdate);
    window.addEventListener("popstate", onPopState);
    return () => {
      emitter.off("update", onEmitterUpdate);
      window.removeEventListener("popstate", onPopState);
    };
  }, [watchKeys.join("&")]);
  const updateUrl = (0, import_react.useMemo)(() => generateUpdateUrlFn(fullPageNavigationOnShallowFalseUpdates), [fullPageNavigationOnShallowFalseUpdates]);
  return {
    searchParams,
    updateUrl
  };
}
var NuqsReactAdapter = createAdapterProvider(useNuqsReactAdapter);
function NuqsAdapter({ children, fullPageNavigationOnShallowFalseUpdates = false, ...adapterProps }) {
  return (0, import_react.createElement)(NuqsReactAdapterContext.Provider, { value: { fullPageNavigationOnShallowFalseUpdates } }, (0, import_react.createElement)(NuqsReactAdapter, {
    ...adapterProps,
    children
  }));
}
function enableHistorySync() {
  patchHistory(emitter, "react");
}
export {
  NuqsAdapter,
  enableHistorySync
};
//# sourceMappingURL=nuqs_adapters_react.js.map
