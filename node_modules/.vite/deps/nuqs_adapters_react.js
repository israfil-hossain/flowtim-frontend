"use client";
import {
  createAdapterProvider,
  debug,
  error,
  mitt_default,
  renderQueryString
} from "./chunk-JS3JE74F.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/nuqs/dist/chunk-TCMXVJZC.js
var historyUpdateMarker = "__nuqs__";
function getSearchParams(url) {
  if (url instanceof URL) {
    return url.searchParams;
  }
  if (url.startsWith("?")) {
    return new URLSearchParams(url);
  }
  try {
    return new URL(url, location.origin).searchParams;
  } catch {
    return new URLSearchParams(url);
  }
}
function patchHistory(emitter2, adapter) {
  var _a, _b, _c;
  if (typeof history === "undefined") {
    return;
  }
  if (((_a = history.nuqs) == null ? void 0 : _a.version) && history.nuqs.version !== "0.0.0-inject-version-here") {
    console.error(
      error(409),
      history.nuqs.version,
      `0.0.0-inject-version-here`,
      adapter
    );
    return;
  }
  if ((_c = (_b = history.nuqs) == null ? void 0 : _b.adapters) == null ? void 0 : _c.includes(adapter)) {
    return;
  }
  let lastSearchSeen = typeof location === "object" ? location.search : "";
  emitter2.on("update", (search) => {
    const searchString = search.toString();
    lastSearchSeen = searchString.length ? "?" + searchString : "";
  });
  debug(
    "[nuqs %s] Patching history (%s adapter)",
    "0.0.0-inject-version-here",
    adapter
  );
  function sync(url) {
    try {
      const newSearch = new URL(url, location.origin).search;
      if (newSearch === lastSearchSeen) {
        return;
      }
    } catch {
    }
    try {
      emitter2.emit("update", getSearchParams(url));
    } catch (e) {
      console.error(e);
    }
  }
  const originalPushState = history.pushState;
  const originalReplaceState = history.replaceState;
  history.pushState = function nuqs_pushState(state, marker, url) {
    originalPushState.call(history, state, "", url);
    if (url && marker !== historyUpdateMarker) {
      sync(url);
    }
  };
  history.replaceState = function nuqs_replaceState(state, marker, url) {
    originalReplaceState.call(history, state, "", url);
    if (url && marker !== historyUpdateMarker) {
      sync(url);
    }
  };
  history.nuqs = history.nuqs ?? {
    // This will be replaced by the prepack script
    version: "0.0.0-inject-version-here",
    adapters: []
  };
  history.nuqs.adapters.push(adapter);
}

// node_modules/nuqs/dist/adapters/react.js
var import_react = __toESM(require_react());
var emitter = mitt_default();
function generateUpdateUrlFn(fullPageNavigationOnShallowFalseUpdates) {
  return function updateUrl(search, options) {
    const url = new URL(location.href);
    url.search = renderQueryString(search);
    if (fullPageNavigationOnShallowFalseUpdates && options.shallow === false) {
      const method = options.history === "push" ? location.assign : location.replace;
      method.call(location, url);
    } else {
      const method = options.history === "push" ? history.pushState : history.replaceState;
      method.call(history, history.state, "", url);
    }
    emitter.emit("update", search);
    if (options.scroll === true) {
      window.scrollTo({ top: 0 });
    }
  };
}
var NuqsReactAdapterContext = (0, import_react.createContext)({
  fullPageNavigationOnShallowFalseUpdates: false
});
function useNuqsReactAdapter() {
  const { fullPageNavigationOnShallowFalseUpdates } = (0, import_react.useContext)(
    NuqsReactAdapterContext
  );
  const [searchParams, setSearchParams] = (0, import_react.useState)(() => {
    if (typeof location === "undefined") {
      return new URLSearchParams();
    }
    return new URLSearchParams(location.search);
  });
  (0, import_react.useEffect)(() => {
    const onPopState = () => {
      setSearchParams(new URLSearchParams(location.search));
    };
    emitter.on("update", setSearchParams);
    window.addEventListener("popstate", onPopState);
    return () => {
      emitter.off("update", setSearchParams);
      window.removeEventListener("popstate", onPopState);
    };
  }, []);
  const updateUrl = (0, import_react.useMemo)(
    () => generateUpdateUrlFn(fullPageNavigationOnShallowFalseUpdates),
    [fullPageNavigationOnShallowFalseUpdates]
  );
  return {
    searchParams,
    updateUrl
  };
}
var NuqsReactAdapter = createAdapterProvider(useNuqsReactAdapter);
function NuqsAdapter({
  children,
  fullPageNavigationOnShallowFalseUpdates = false
}) {
  return (0, import_react.createElement)(
    NuqsReactAdapterContext.Provider,
    { value: { fullPageNavigationOnShallowFalseUpdates } },
    (0, import_react.createElement)(NuqsReactAdapter, null, children)
  );
}
function enableHistorySync() {
  patchHistory(emitter, "react");
}
export {
  NuqsAdapter,
  enableHistorySync
};
//# sourceMappingURL=nuqs_adapters_react.js.map
