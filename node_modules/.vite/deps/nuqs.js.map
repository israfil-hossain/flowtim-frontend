{
  "version": 3,
  "sources": ["../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/loader.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/safe-parse.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/parsers.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/serializer.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/standard-schema.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/lib/sync.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/useQueryStates.ts", "../../.pnpm/nuqs@2.6.0_react-router-dom@7.9.3_react-dom@18.3.1_react@18.3.1__react@18.3.1__react-ro_2c608c5120377f1a6705390e68075f8e/node_modules/nuqs/src/useQueryState.ts"],
  "sourcesContent": ["import type { UrlKeys } from './defs'\nimport type { inferParserType, ParserMap } from './parsers'\n\nexport type LoaderInput =\n  | URL\n  | Request\n  | URLSearchParams\n  | Record<string, string | string[] | undefined>\n  | string\n\n/**\n * @deprecated Use `CreateLoaderOptions` instead.\n */\nexport type LoaderOptions<Parsers extends ParserMap> = {\n  urlKeys?: UrlKeys<Parsers>\n}\nexport type CreateLoaderOptions<P extends ParserMap> = LoaderOptions<P>\nexport type LoaderFunctionOptions = {\n  /**\n   * Whether to use strict parsing. If true, the loader will throw an error if\n   * any of the parsers fail to parse their respective values. If false, the\n   * loader will return null or their default value for any failed parsers.\n   */\n  strict?: boolean\n}\n\nexport type LoaderFunction<Parsers extends ParserMap> = {\n  /**\n   * Load & parse search params from (almost) any input.\n   *\n   * While loaders are typically used in the context of a React Router / Remix\n   * loader function, it can also be used in Next.js API routes or\n   * getServerSideProps functions, or even with the app router `searchParams`\n   * page prop (sync or async), if you don't need the cache behaviours.\n   */\n  (\n    input: LoaderInput,\n    options?: LoaderFunctionOptions\n  ): inferParserType<Parsers>\n  /**\n   * Load & parse search params from (almost) any input.\n   *\n   * While loaders are typically used in the context of a React Router / Remix\n   * loader function, it can also be used in Next.js API routes or\n   * getServerSideProps functions, or even with the app router `searchParams`\n   * page prop (sync or async), if you don't need the cache behaviours.\n   *\n   * Note: this async overload makes it easier to use against the `searchParams`\n   * page prop in Next.js 15 app router:\n   *\n   * ```tsx\n   * export default async function Page({ searchParams }) {\n   *   const parsedSearchParamsPromise = loadSearchParams(searchParams)\n   *   return (\n   *     // Pre-render & stream the shell immediately\n   *     <StaticShell>\n   *       <Suspense>\n   *         // Stream the Promise down\n   *         <DynamicComponent searchParams={parsedSearchParamsPromise} />\n   *       </Suspense>\n   *      </StaticShell>\n   *   )\n   * }\n   * ```\n   */\n  (\n    input: Promise<LoaderInput>,\n    options?: LoaderFunctionOptions\n  ): Promise<inferParserType<Parsers>>\n}\n\nexport function createLoader<Parsers extends ParserMap>(\n  parsers: Parsers,\n  { urlKeys = {} }: CreateLoaderOptions<Parsers> = {}\n): LoaderFunction<Parsers> {\n  type ParsedSearchParams = inferParserType<Parsers>\n\n  function loadSearchParams(\n    input: LoaderInput,\n    options?: LoaderFunctionOptions\n  ): ParsedSearchParams\n\n  function loadSearchParams(\n    input: Promise<LoaderInput>,\n    options?: LoaderFunctionOptions\n  ): Promise<ParsedSearchParams>\n\n  function loadSearchParams(\n    input: LoaderInput | Promise<LoaderInput>,\n    { strict = false }: LoaderFunctionOptions = {}\n  ) {\n    if (input instanceof Promise) {\n      return input.then(i => loadSearchParams(i, { strict }))\n    }\n    const searchParams = extractSearchParams(input)\n    const result = {} as any\n    for (const [key, parser] of Object.entries(parsers)) {\n      const urlKey = urlKeys[key] ?? key\n      const query = searchParams.get(urlKey)\n      if (query === null) {\n        result[key] = parser.defaultValue ?? null\n        continue\n      }\n      let parsedValue\n      try {\n        parsedValue = parser.parse(query)\n      } catch (error) {\n        if (strict) {\n          throw new Error(\n            `[nuqs] Error while parsing query \\`${query}\\` for key \\`${key}\\`: ${error}`\n          )\n        }\n        parsedValue = null\n      }\n      if (strict && query && parsedValue === null) {\n        throw new Error(\n          `[nuqs] Failed to parse query \\`${query}\\` for key \\`${key}\\` (got null)`\n        )\n      }\n      result[key] = parsedValue ?? parser.defaultValue ?? null\n    }\n    return result\n  }\n  return loadSearchParams\n}\n\nfunction extractSearchParams(input: LoaderInput): URLSearchParams {\n  try {\n    if (input instanceof Request) {\n      return input.url ? new URL(input.url).searchParams : new URLSearchParams()\n    }\n    if (input instanceof URL) {\n      return input.searchParams\n    }\n    if (input instanceof URLSearchParams) {\n      return input\n    }\n    if (typeof input === 'object') {\n      const searchParams = new URLSearchParams()\n      for (const [key, value] of Object.entries(input)) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v)\n          }\n        } else if (value !== undefined) {\n          searchParams.set(key, value)\n        }\n      }\n      return searchParams\n    }\n    if (typeof input === 'string') {\n      if (URL.hasOwnProperty('canParse') && URL.canParse(input)) {\n        return new URL(input).searchParams\n      }\n      return new URLSearchParams(input)\n    }\n  } catch {}\n  return new URLSearchParams()\n}\n", "import type { Parser } from '../parsers'\nimport { warn } from './debug'\n\nexport function safeParse<T>(\n  parser: Parser<T>['parse'],\n  value: string,\n  key?: string\n): T | null {\n  try {\n    return parser(value)\n  } catch (error) {\n    warn(\n      '[nuqs] Error while parsing value `%s`: %O' +\n        (key ? ' (for key `%s`)' : ''),\n      value,\n      error,\n      key\n    )\n    return null\n  }\n}\n", "import type { StandardSchemaV1 } from '@standard-schema/spec'\nimport type { Options } from './defs'\nimport { safeParse } from './lib/safe-parse'\n\ntype Require<T, Keys extends keyof T> = Pick<Required<T>, Keys> & Omit<T, Keys>\n\nexport type Parser<T> = {\n  /**\n   * Convert a query string value into a state value.\n   *\n   * If the string value does not represent a valid state value,\n   * the parser should return `null`. Throwing an error is also supported.\n   */\n  parse: (value: string) => T | null\n\n  /**\n   * Render the state value into a query string value.\n   */\n  serialize?: (value: T) => string\n\n  /**\n   * Check if two state values are equal.\n   *\n   * This is used when using the `clearOnDefault` value, to compare the default\n   * value with the set value.\n   *\n   * It makes sense to provide this function when the state value is an object\n   * or an array, as the default referential equality check will not work.\n   */\n  eq?: (a: T, b: T) => boolean\n}\n\nexport type ParserBuilder<T> = Required<Parser<T>> &\n  Options & {\n    /**\n     * Set history type, shallow routing and scroll restoration options\n     * at the hook declaration level.\n     *\n     * Note that you can override those options in individual calls to the\n     * state updater function.\n     */\n    withOptions<This>(this: This, options: Options): This\n\n    /**\n     * Specifying a default value makes the hook state non-nullable when the\n     * query is missing from the URL: the default value is returned instead\n     * of `null`.\n     *\n     * Setting the state to the default value¹ will clear the query string key\n     * from the URL, unless `clearOnDefault` is set to `false`.\n     *\n     * Setting the state to `null` will always clear the query string key\n     * from the URL, and return the default value.\n     *\n     * ¹: Equality is checked with the parser's `eq` function, or referential\n     * equality if not provided.\n     *\n     * @param defaultValue\n     */\n    withDefault(\n      this: ParserBuilder<T>,\n      defaultValue: NonNullable<T>\n    ): Omit<ParserBuilder<T>, 'parseServerSide'> & {\n      readonly defaultValue: NonNullable<T>\n\n      /**\n       * Use the parser in Server Components\n       *\n       * `parse` is intended to be used only by the hook, but you can use this\n       * method to hydrate query values on server-side rendered pages.\n       * See the `server-side-parsing` demo for an example.\n       *\n       * Note that when multiple queries are presented to the parser\n       * (eg: `/?a=1&a=2`), only the **first** will be parsed, to mimic the\n       * behaviour of URLSearchParams:\n       * https://url.spec.whatwg.org/#dom-urlsearchparams-get\n       *\n       * @param value as coming from page props\n       *\n       * @deprecated prefer using loaders instead, as they enforce a strong\n       * bond between the data type and the search param key.\n       */\n      parseServerSide(value: string | string[] | undefined): NonNullable<T>\n    }\n\n    /**\n     * Use the parser in Server Components\n     *\n     * `parse` is intended to be used only by the hook, but you can use this\n     * method to hydrate query values on server-side rendered pages.\n     * See the `server-side-parsing` demo for an example.\n     *\n     * Note that when multiple queries are presented to the parser\n     * (eg: `/?a=1&a=2`), only the **first** will be parsed, to mimic the\n     * behaviour of URLSearchParams:\n     * https://url.spec.whatwg.org/#dom-urlsearchparams-get\n     *\n     * @param value as coming from page props\n     *\n     * @deprecated prefer using loaders instead, as they enforce a strong\n     * bond between the data type and the search param key.\n     */\n    parseServerSide(value: string | string[] | undefined): T | null\n  }\n\n/**\n * Wrap a set of parse/serialize functions into a builder pattern parser\n * you can pass to one of the hooks, making its default value type safe.\n */\nexport function createParser<T>(\n  parser: Require<Parser<T>, 'parse' | 'serialize'>\n): ParserBuilder<T> {\n  function parseServerSideNullable(value: string | string[] | undefined) {\n    if (typeof value === 'undefined') {\n      return null\n    }\n    let str = ''\n    if (Array.isArray(value)) {\n      // Follow the spec:\n      // https://url.spec.whatwg.org/#dom-urlsearchparams-get\n      if (value[0] === undefined) {\n        return null\n      }\n      str = value[0]\n    }\n    if (typeof value === 'string') {\n      str = value\n    }\n    return safeParse(parser.parse, str)\n  }\n\n  return {\n    eq: (a, b) => a === b,\n    ...parser,\n    parseServerSide: parseServerSideNullable,\n    withDefault(defaultValue) {\n      return {\n        ...this,\n        defaultValue,\n        parseServerSide(value) {\n          return parseServerSideNullable(value) ?? defaultValue\n        }\n      }\n    },\n    withOptions(options: Options) {\n      return {\n        ...this,\n        ...options\n      }\n    }\n  }\n}\n\n// Parsers implementations -----------------------------------------------------\n\nexport const parseAsString: ParserBuilder<string> = createParser({\n  parse: v => v,\n  serialize: String\n})\n\nexport const parseAsInteger: ParserBuilder<number> = createParser({\n  parse: v => {\n    const int = parseInt(v)\n    return int == int ? int : null // NaN check at low bundle size cost\n  },\n  serialize: v => '' + Math.round(v)\n})\n\nexport const parseAsIndex: ParserBuilder<number> = createParser({\n  parse: v => {\n    const int = parseInt(v)\n    return int == int ? int - 1 : null // NaN check at low bundle size cost\n  },\n  serialize: v => '' + Math.round(v + 1)\n})\n\nexport const parseAsHex: ParserBuilder<number> = createParser({\n  parse: v => {\n    const int = parseInt(v, 16)\n    return int == int ? int : null // NaN check at low bundle size cost\n  },\n  serialize: v => {\n    const hex = Math.round(v).toString(16)\n    return (hex.length & 1 ? '0' : '') + hex\n  }\n})\n\nexport const parseAsFloat: ParserBuilder<number> = createParser({\n  parse: v => {\n    const float = parseFloat(v)\n    return float == float ? float : null // NaN check at low bundle size cost\n  },\n  serialize: String\n})\n\nexport const parseAsBoolean: ParserBuilder<boolean> = createParser({\n  parse: v => v === 'true',\n  serialize: String\n})\n\nfunction compareDates(a: Date, b: Date) {\n  return a.valueOf() === b.valueOf()\n}\n\n/**\n * Querystring encoded as the number of milliseconds since epoch,\n * and returned as a Date object.\n */\nexport const parseAsTimestamp: ParserBuilder<Date> = createParser({\n  parse: v => {\n    const ms = parseInt(v)\n    return ms == ms ? new Date(ms) : null // NaN check at low bundle size cost\n  },\n  serialize: (v: Date) => '' + v.valueOf(),\n  eq: compareDates\n})\n\n/**\n * Querystring encoded as an ISO-8601 string (UTC),\n * and returned as a Date object.\n */\nexport const parseAsIsoDateTime: ParserBuilder<Date> = createParser({\n  parse: v => {\n    const date = new Date(v)\n    // NaN check at low bundle size cost\n    return date.valueOf() == date.valueOf() ? date : null\n  },\n  serialize: (v: Date) => v.toISOString(),\n  eq: compareDates\n})\n\n/**\n * Querystring encoded as an ISO-8601 string (UTC)\n * without the time zone offset, and returned as\n * a Date object.\n *\n * The Date is parsed without the time zone offset,\n * making it at 00:00:00 UTC.\n */\nexport const parseAsIsoDate: ParserBuilder<Date> = createParser({\n  parse: v => {\n    const date = new Date(v.slice(0, 10))\n    // NaN check at low bundle size cost\n    return date.valueOf() == date.valueOf() ? date : null\n  },\n  serialize: (v: Date) => v.toISOString().slice(0, 10),\n  eq: compareDates\n})\n\n/**\n * String-based enums provide better type-safety for known sets of values.\n * You will need to pass the parseAsStringEnum function a list of your enum values\n * in order to validate the query string. Anything else will return `null`,\n * or your default value if specified.\n *\n * Example:\n * ```ts\n * enum Direction {\n *   up = 'UP',\n *   down = 'DOWN',\n *   left = 'LEFT',\n *   right = 'RIGHT'\n * }\n *\n * const [direction, setDirection] = useQueryState(\n *   'direction',\n *    parseAsStringEnum<Direction>(Object.values(Direction)) // pass a list of allowed values\n *      .withDefault(Direction.up)\n * )\n * ```\n *\n * Note: the query string value will be the value of the enum, not its name\n * (example above: `direction=UP`).\n *\n * @param validValues The values you want to accept\n */\nexport function parseAsStringEnum<Enum extends string>(\n  validValues: Enum[]\n): ParserBuilder<Enum> {\n  // Delegate implementation to parseAsStringLiteral to avoid duplication.\n  return parseAsStringLiteral(validValues as readonly Enum[])\n}\n\n/**\n * String-based literals provide better type-safety for known sets of values.\n * You will need to pass the parseAsStringLiteral function a list of your string values\n * in order to validate the query string. Anything else will return `null`,\n * or your default value if specified.\n *\n * Example:\n * ```ts\n * const colors = [\"red\", \"green\", \"blue\"] as const\n *\n * const [color, setColor] = useQueryState(\n *   'color',\n *    parseAsStringLiteral(colors) // pass a readonly list of allowed values\n *      .withDefault(\"red\")\n * )\n * ```\n *\n * @param validValues The values you want to accept\n */\nexport function parseAsStringLiteral<const Literal extends string>(\n  validValues: readonly Literal[]\n): ParserBuilder<Literal> {\n  return createParser({\n    parse: (query: string) => {\n      const asConst = query as unknown as Literal\n      return validValues.includes(asConst) ? asConst : null\n    },\n    serialize: String\n  })\n}\n\n/**\n * Number-based literals provide better type-safety for known sets of values.\n * You will need to pass the parseAsNumberLiteral function a list of your number values\n * in order to validate the query string. Anything else will return `null`,\n * or your default value if specified.\n *\n * Example:\n * ```ts\n * const diceSides = [1, 2, 3, 4, 5, 6] as const\n *\n * const [side, setSide] = useQueryState(\n *   'side',\n *    parseAsNumberLiteral(diceSides) // pass a readonly list of allowed values\n *      .withDefault(4)\n * )\n * ```\n *\n * @param validValues The values you want to accept\n */\nexport function parseAsNumberLiteral<const Literal extends number>(\n  validValues: readonly Literal[]\n): ParserBuilder<Literal> {\n  return createParser({\n    parse: (query: string) => {\n      const asConst = parseFloat(query) as unknown as Literal\n      if (validValues.includes(asConst)) {\n        return asConst\n      }\n      return null\n    },\n    serialize: String\n  })\n}\n\n/**\n * Encode any object shape into the querystring value as JSON.\n * Note: you may want to use `useQueryStates` for finer control over\n * multiple related query keys.\n *\n * @param runtimeParser Runtime parser (eg: Zod schema or Standard Schema) to validate after JSON.parse\n */\nexport function parseAsJson<T>(\n  validator: ((value: unknown) => T | null) | StandardSchemaV1<T>\n): ParserBuilder<T> {\n  return createParser({\n    parse: query => {\n      try {\n        const obj = JSON.parse(query)\n        if ('~standard' in validator) {\n          const result = validator['~standard'].validate(obj)\n          if (result instanceof Promise) {\n            throw new Error(\n              '[nuqs] Only synchronous Standard Schemas are supported in parseAsJson.'\n            )\n          }\n          return result.issues ? null : result.value\n        }\n        return validator(obj)\n      } catch {\n        return null\n      }\n    },\n    serialize: value => JSON.stringify(value),\n    eq(a, b) {\n      // Check for referential equality first\n      return a === b || JSON.stringify(a) === JSON.stringify(b)\n    }\n  })\n}\n\n/**\n * A comma-separated list of items.\n * Items are URI-encoded for safety, so they may not look nice in the URL.\n *\n * @param itemParser Parser for each individual item in the array\n * @param separator The character to use to separate items (default ',')\n */\nexport function parseAsArrayOf<ItemType>(\n  itemParser: Parser<ItemType>,\n  separator = ','\n): ParserBuilder<ItemType[]> {\n  const itemEq = itemParser.eq ?? ((a: ItemType, b: ItemType) => a === b)\n  const encodedSeparator = encodeURIComponent(separator)\n  // todo: Handle default item values and make return type non-nullable\n  return createParser({\n    parse: query => {\n      if (query === '') {\n        // Empty query should not go through the split/map/filter logic,\n        // see https://github.com/47ng/nuqs/issues/329\n        return [] as ItemType[]\n      }\n      return query\n        .split(separator)\n        .map((item, index) =>\n          safeParse(\n            itemParser.parse,\n            item.replaceAll(encodedSeparator, separator),\n            `[${index}]`\n          )\n        )\n        .filter(value => value !== null && value !== undefined) as ItemType[]\n    },\n    serialize: values =>\n      values\n        .map<string>(value => {\n          const str = itemParser.serialize\n            ? itemParser.serialize(value)\n            : String(value)\n          return str.replaceAll(separator, encodedSeparator)\n        })\n        .join(separator),\n    eq(a, b) {\n      if (a === b) {\n        return true // Referentially stable\n      }\n      if (a.length !== b.length) {\n        return false\n      }\n      return a.every((value, index) => itemEq(value, b[index]!))\n    }\n  })\n}\n\ntype inferSingleParserType<Parser> = Parser extends ParserBuilder<\n  infer Value\n> & {\n  defaultValue: infer Value\n}\n  ? Value\n  : Parser extends ParserBuilder<infer Value>\n    ? Value | null\n    : never\n\ntype inferParserRecordType<Map extends Record<string, ParserBuilder<any>>> = {\n  [Key in keyof Map]: inferSingleParserType<Map[Key]>\n} & {}\n\n/**\n * Type helper to extract the underlying returned data type of a parser\n * or of an object describing multiple parsers and their associated keys.\n *\n * Usage:\n *\n * ```ts\n * import { type inferParserType } from 'nuqs' // or 'nuqs/server'\n *\n * const intNullable = parseAsInteger\n * const intNonNull = parseAsInteger.withDefault(0)\n *\n * inferParserType<typeof intNullable> // number | null\n * inferParserType<typeof intNonNull> // number\n *\n * const parsers = {\n *  a: parseAsInteger,\n *  b: parseAsBoolean.withDefault(false)\n * }\n *\n * inferParserType<typeof parsers>\n * // { a: number | null, b: boolean }\n * ```\n */\nexport type inferParserType<Input> =\n  Input extends ParserBuilder<any>\n    ? inferSingleParserType<Input>\n    : Input extends Record<string, ParserBuilder<any>>\n      ? inferParserRecordType<Input>\n      : never\n\nexport type ParserWithOptionalDefault<T> = ParserBuilder<T> & {\n  defaultValue?: T\n}\nexport type ParserMap = Record<string, ParserWithOptionalDefault<any>>\n", "import type { Nullable, Options, UrlKeys } from './defs'\nimport { renderQueryString } from './lib/url-encoding'\nimport type { inferParserType, ParserMap } from './parsers'\n\ntype Base = string | URLSearchParams | URL\n\nexport type CreateSerializerOptions<Parsers extends ParserMap> = Pick<\n  Options,\n  'clearOnDefault'\n> & {\n  urlKeys?: UrlKeys<Parsers>\n  processUrlSearchParams?: (searchParams: URLSearchParams) => URLSearchParams\n}\n\ntype SerializeFunction<\n  Parsers extends ParserMap,\n  BaseType extends Base = Base,\n  Return = string\n> = {\n  /**\n   * Generate a query string for the given values.\n   */\n  (values: Partial<Nullable<inferParserType<Parsers>>>): Return\n  /**\n   * Append/amend the query string of the given base with the given values.\n   *\n   * Existing search param values will kept, unless:\n   * - the value is null, in which case the search param will be deleted\n   * - another value is given for an existing key, in which case the\n   *  search param will be updated\n   */\n  (\n    base: BaseType,\n    values: Partial<Nullable<inferParserType<Parsers>>> | null\n  ): Return\n}\n\nexport function createSerializer<\n  Parsers extends ParserMap,\n  BaseType extends Base = Base,\n  Return = string\n>(\n  parsers: Parsers,\n  {\n    clearOnDefault = true,\n    urlKeys = {},\n    processUrlSearchParams\n  }: CreateSerializerOptions<Parsers> = {}\n): SerializeFunction<Parsers, BaseType, Return> {\n  type Values = Partial<Nullable<inferParserType<Parsers>>>\n\n  /**\n   * Generate a query string for the given values.\n   */\n  function serialize(values: Values): Return\n  /**\n   * Append/amend the query string of the given base with the given values.\n   *\n   * Existing search param values will kept, unless:\n   * - the value is null, in which case the search param will be deleted\n   * - another value is given for an existing key, in which case the\n   *  search param will be updated\n   */\n  function serialize(base: BaseType, values: Values | null): Return\n  function serialize(\n    arg1BaseOrValues: BaseType | Values,\n    arg2values: Values | null = {}\n  ) {\n    let [base, search] = isBase<BaseType>(arg1BaseOrValues)\n      ? splitBase(arg1BaseOrValues)\n      : ['', new URLSearchParams()]\n    const values = isBase(arg1BaseOrValues) ? arg2values : arg1BaseOrValues\n    if (values === null) {\n      for (const key in parsers) {\n        const urlKey = urlKeys[key] ?? key\n        search.delete(urlKey)\n      }\n      if (processUrlSearchParams) {\n        search = processUrlSearchParams(search)\n      }\n      return (base + renderQueryString(search)) as Return\n    }\n    for (const key in parsers) {\n      const parser = parsers[key]\n      const value = values[key]\n      if (!parser || value === undefined) {\n        continue\n      }\n      const urlKey = urlKeys[key] ?? key\n      const isMatchingDefault =\n        parser.defaultValue !== undefined &&\n        (parser.eq ?? ((a, b) => a === b))(value, parser.defaultValue)\n\n      if (\n        value === null ||\n        ((parser.clearOnDefault ?? clearOnDefault ?? true) && isMatchingDefault)\n      ) {\n        search.delete(urlKey)\n      } else {\n        search.set(urlKey, parser.serialize(value))\n      }\n    }\n    if (processUrlSearchParams) {\n      search = processUrlSearchParams(search)\n    }\n    return base + renderQueryString(search)\n  }\n  return serialize\n}\n\nfunction isBase<BaseType>(base: any): base is BaseType {\n  return (\n    typeof base === 'string' ||\n    base instanceof URLSearchParams ||\n    base instanceof URL\n  )\n}\n\nfunction splitBase<BaseType extends Base>(base: BaseType) {\n  if (typeof base === 'string') {\n    const [path = '', ...search] = base.split('?')\n    return [path, new URLSearchParams(search.join('?'))] as const\n  } else if (base instanceof URLSearchParams) {\n    return ['', new URLSearchParams(base)] as const // Operate on a copy of URLSearchParams, as derived classes may restrict its allowed methods\n  } else {\n    return [\n      base.origin + base.pathname,\n      new URLSearchParams(base.searchParams)\n    ] as const\n  }\n}\n", "import type { StandardSchemaV1 } from '@standard-schema/spec'\nimport { createLoader, type CreateLoaderOptions } from './loader'\nimport type { ParserMap, inferParserType } from './parsers'\nimport { createSerializer } from './serializer'\n\nexport type CreateStandardSchemaV1Options<\n  Parsers extends ParserMap,\n  PartialOutput extends boolean = false\n> = CreateLoaderOptions<Parsers> & {\n  /**\n   * Marks the output type as Partial, and removes any keys\n   * from the output that are not present in the input.\n   *\n   * This is useful for TanStack Router, to avoid reflecting default values\n   * (or null) in the URL, and to make search params optional in Links,\n   * as default values are handled by nuqs.\n   *\n   * @default false\n   */\n  partialOutput?: PartialOutput\n}\n\ntype MaybePartial<Condition, Type> = Condition extends true\n  ? Partial<Type>\n  : Type\n\nexport function createStandardSchemaV1<\n  Parsers extends ParserMap,\n  PartialOutput extends boolean = false\n>(\n  parsers: Parsers,\n  {\n    urlKeys,\n    partialOutput = false as PartialOutput\n  }: CreateStandardSchemaV1Options<Parsers, PartialOutput> = {}\n): StandardSchemaV1<MaybePartial<PartialOutput, inferParserType<Parsers>>> {\n  const serialize = createSerializer(parsers, { urlKeys })\n  const load = createLoader(parsers, { urlKeys })\n  return {\n    '~standard': {\n      version: 1,\n      vendor: 'nuqs',\n      validate(input) {\n        try {\n          const url = serialize(input as any)\n          const value = load(url, { strict: true })\n          if (partialOutput) {\n            for (const key in value) {\n              if (!(key in (input as any))) {\n                delete value[key]\n              }\n            }\n          }\n          return { value }\n        } catch (error) {\n          return {\n            issues: [\n              {\n                message: error instanceof Error ? error.message : String(error)\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n", "import { createEmitter, type Emitter } from './emitter'\n\nexport type CrossHookSyncPayload = {\n  state: any\n  query: string | null\n}\n\ntype EventMap = {\n  [key: string]: CrossHookSyncPayload\n}\n\nexport const emitter: Emitter<EventMap> = createEmitter()\n", "import { useCallback, useEffect, useId, useMemo, useRef, useState } from 'react'\nimport {\n  useAdapter,\n  useAdapterDefaultOptions,\n  useAdapterProcessUrlSearchParams\n} from './adapters/lib/context'\nimport type { Nullable, Options, UrlKeys } from './defs'\nimport { debug } from './lib/debug'\nimport { error } from './lib/errors'\nimport { debounceController } from './lib/queues/debounce'\nimport { defaultRateLimit } from './lib/queues/rate-limiting'\nimport {\n  globalThrottleQueue,\n  type UpdateQueuePushArgs\n} from './lib/queues/throttle'\nimport { safeParse } from './lib/safe-parse'\nimport { emitter, type CrossHookSyncPayload } from './lib/sync'\nimport type { Parser } from './parsers'\n\ntype KeyMapValue<Type> = Parser<Type> &\n  Options & {\n    defaultValue?: Type\n  }\n\nexport type UseQueryStatesKeysMap<Map = any> = {\n  [Key in keyof Map]: KeyMapValue<Map[Key]>\n} & {}\n\nexport type UseQueryStatesOptions<KeyMap extends UseQueryStatesKeysMap> =\n  Options & {\n    urlKeys: UrlKeys<KeyMap>\n  }\n\nexport type Values<T extends UseQueryStatesKeysMap> = {\n  [K in keyof T]: T[K]['defaultValue'] extends NonNullable<\n    ReturnType<T[K]['parse']>\n  >\n    ? NonNullable<ReturnType<T[K]['parse']>>\n    : ReturnType<T[K]['parse']> | null\n}\ntype NullableValues<T extends UseQueryStatesKeysMap> = Nullable<Values<T>>\n\ntype UpdaterFn<T extends UseQueryStatesKeysMap> = (\n  old: Values<T>\n) => Partial<Nullable<Values<T>>> | null\n\nexport type SetValues<T extends UseQueryStatesKeysMap> = (\n  values: Partial<Nullable<Values<T>>> | UpdaterFn<T> | null,\n  options?: Options\n) => Promise<URLSearchParams>\n\nexport type UseQueryStatesReturn<T extends UseQueryStatesKeysMap> = [\n  Values<T>,\n  SetValues<T>\n]\n\n// Ensure referential consistency for the default value of urlKeys\n// by hoisting it out of the function scope.\n// Otherwise useEffect loops go brrrr\nconst defaultUrlKeys = {}\n\n/**\n * Synchronise multiple query string arguments to React state in Next.js\n *\n * @param keys - An object describing the keys to synchronise and how to\n *               serialise and parse them.\n *               Use `parseAs(String|Integer|Float|...)` for quick shorthands.\n * @param options - Optional history mode, shallow routing and scroll restoration options.\n */\nexport function useQueryStates<KeyMap extends UseQueryStatesKeysMap>(\n  keyMap: KeyMap,\n  options: Partial<UseQueryStatesOptions<KeyMap>> = {}\n): UseQueryStatesReturn<KeyMap> {\n  const hookId = useId()\n  const defaultOptions = useAdapterDefaultOptions()\n  const processUrlSearchParams = useAdapterProcessUrlSearchParams()\n\n  const {\n    history = 'replace',\n    scroll = defaultOptions?.scroll ?? false,\n    shallow = defaultOptions?.shallow ?? true,\n    throttleMs = defaultRateLimit.timeMs,\n    limitUrlUpdates = defaultOptions?.limitUrlUpdates,\n    clearOnDefault = defaultOptions?.clearOnDefault ?? true,\n    startTransition,\n    urlKeys = defaultUrlKeys as UrlKeys<KeyMap>\n  } = options\n\n  type V = NullableValues<KeyMap>\n  const stateKeys = Object.keys(keyMap).join(',')\n  const resolvedUrlKeys = useMemo(\n    () =>\n      Object.fromEntries(\n        Object.keys(keyMap).map(key => [key, urlKeys[key] ?? key])\n      ),\n    [stateKeys, JSON.stringify(urlKeys)]\n  )\n  const adapter = useAdapter(Object.values(resolvedUrlKeys))\n  const initialSearchParams = adapter.searchParams\n  const queryRef = useRef<Record<string, string | null>>({})\n  const defaultValues = useMemo(\n    () =>\n      Object.fromEntries(\n        Object.keys(keyMap).map(key => [key, keyMap[key]!.defaultValue ?? null])\n      ) as Values<KeyMap>,\n    [\n      Object.values(keyMap)\n        .map(({ defaultValue }) => defaultValue)\n        .join(',')\n    ]\n  )\n  const queuedQueries = debounceController.useQueuedQueries(\n    Object.values(resolvedUrlKeys)\n  )\n  const [internalState, setInternalState] = useState<V>(() => {\n    const source = initialSearchParams ?? new URLSearchParams()\n    return parseMap(keyMap, urlKeys, source, queuedQueries).state\n  })\n\n  const stateRef = useRef(internalState)\n  debug(\n    '[nuq+ %s `%s`] render - state: %O, iSP: %s',\n    hookId,\n    stateKeys,\n    internalState,\n    initialSearchParams\n  )\n\n  // Initialise the refs with the initial values\n  if (\n    Object.keys(queryRef.current).join('&') !==\n    Object.values(resolvedUrlKeys).join('&')\n  ) {\n    const { state, hasChanged } = parseMap(\n      keyMap,\n      urlKeys,\n      initialSearchParams,\n      queuedQueries,\n      queryRef.current,\n      stateRef.current\n    )\n    if (hasChanged) {\n      debug('[nuq+ %s `%s`] State changed: %O', hookId, stateKeys, {\n        state,\n        initialSearchParams,\n        queuedQueries,\n        queryRef: queryRef.current,\n        stateRef: stateRef.current\n      })\n      stateRef.current = state\n      setInternalState(state)\n    }\n    queryRef.current = Object.fromEntries(\n      Object.values(resolvedUrlKeys).map(urlKey => [\n        urlKey,\n        initialSearchParams?.get(urlKey) ?? null\n      ])\n    )\n  }\n\n  useEffect(() => {\n    const { state, hasChanged } = parseMap(\n      keyMap,\n      urlKeys,\n      initialSearchParams,\n      queuedQueries,\n      queryRef.current,\n      stateRef.current\n    )\n    if (hasChanged) {\n      debug('[nuq+ %s `%s`] State changed: %O', hookId, stateKeys, {\n        state,\n        initialSearchParams,\n        queuedQueries,\n        queryRef: queryRef.current,\n        stateRef: stateRef.current\n      })\n      stateRef.current = state\n      setInternalState(state)\n    }\n  }, [\n    Object.values(resolvedUrlKeys)\n      .map(key => `${key}=${initialSearchParams?.get(key)}`)\n      .join('&'),\n    JSON.stringify(queuedQueries)\n  ])\n\n  // Sync all hooks together & with external URL changes\n  useEffect(() => {\n    function updateInternalState(state: V) {\n      debug('[nuq+ %s `%s`] updateInternalState %O', hookId, stateKeys, state)\n      stateRef.current = state\n      setInternalState(state)\n    }\n    const handlers = Object.keys(keyMap).reduce(\n      (handlers, stateKey) => {\n        handlers[stateKey as keyof KeyMap] = ({\n          state,\n          query\n        }: CrossHookSyncPayload) => {\n          const { defaultValue } = keyMap[stateKey]!\n          const urlKey = resolvedUrlKeys[stateKey]!\n          // Note: cannot mutate in-place, the object ref must change\n          // for the subsequent setState to pick it up.\n          stateRef.current = {\n            ...stateRef.current,\n            [stateKey as keyof KeyMap]: state ?? defaultValue ?? null\n          }\n          queryRef.current[urlKey] = query\n          debug(\n            '[nuq+ %s `%s`] Cross-hook key sync %s: %O (default: %O). Resolved: %O',\n            hookId,\n            stateKeys,\n            urlKey,\n            state,\n            defaultValue,\n            stateRef.current\n          )\n          updateInternalState(stateRef.current)\n        }\n        return handlers\n      },\n      {} as Record<keyof KeyMap, (payload: CrossHookSyncPayload) => void>\n    )\n\n    for (const stateKey of Object.keys(keyMap)) {\n      const urlKey = resolvedUrlKeys[stateKey]!\n      debug(\n        '[nuq+ %s `%s`] Subscribing to sync for `%s`',\n        hookId,\n        urlKey,\n        stateKeys\n      )\n      emitter.on(urlKey, handlers[stateKey]!)\n    }\n    return () => {\n      for (const stateKey of Object.keys(keyMap)) {\n        const urlKey = resolvedUrlKeys[stateKey]!\n        debug(\n          '[nuq+ %s `%s`] Unsubscribing to sync for `%s`',\n          hookId,\n          urlKey,\n          stateKeys\n        )\n        emitter.off(urlKey, handlers[stateKey])\n      }\n    }\n  }, [stateKeys, resolvedUrlKeys])\n\n  const update = useCallback<SetValues<KeyMap>>(\n    (stateUpdater, callOptions = {}) => {\n      const nullMap = Object.fromEntries(\n        Object.keys(keyMap).map(key => [key, null])\n      ) as Nullable<KeyMap>\n      const newState: Partial<Nullable<KeyMap>> =\n        typeof stateUpdater === 'function'\n          ? (stateUpdater(\n              applyDefaultValues(stateRef.current, defaultValues)\n            ) ?? nullMap)\n          : (stateUpdater ?? nullMap)\n      debug('[nuq+ %s `%s`] setState: %O', hookId, stateKeys, newState)\n      let returnedPromise: Promise<URLSearchParams> | undefined = undefined\n      let maxDebounceTime = 0\n      const debounceAborts: Array<\n        (p: Promise<URLSearchParams>) => Promise<URLSearchParams>\n      > = []\n      for (let [stateKey, value] of Object.entries(newState)) {\n        const parser = keyMap[stateKey]\n        const urlKey = resolvedUrlKeys[stateKey]!\n        if (!parser) {\n          continue\n        }\n        if (\n          (callOptions.clearOnDefault ??\n            parser.clearOnDefault ??\n            clearOnDefault) &&\n          value !== null &&\n          parser.defaultValue !== undefined &&\n          (parser.eq ?? ((a, b) => a === b))(value, parser.defaultValue)\n        ) {\n          value = null\n        }\n        const query =\n          value === null ? null : (parser.serialize ?? String)(value)\n        emitter.emit(urlKey, { state: value, query })\n        const update: UpdateQueuePushArgs = {\n          key: urlKey,\n          query,\n          options: {\n            // Call-level options take precedence over individual parser options\n            // which take precedence over global options\n            history: callOptions.history ?? parser.history ?? history,\n            shallow: callOptions.shallow ?? parser.shallow ?? shallow,\n            scroll: callOptions.scroll ?? parser.scroll ?? scroll,\n            startTransition:\n              callOptions.startTransition ??\n              parser.startTransition ??\n              startTransition\n          }\n        }\n        if (\n          callOptions?.limitUrlUpdates?.method === 'debounce' ||\n          limitUrlUpdates?.method === 'debounce' ||\n          parser.limitUrlUpdates?.method === 'debounce'\n        ) {\n          if (update.options.shallow === true) {\n            console.warn(error(422))\n          }\n          const timeMs =\n            callOptions?.limitUrlUpdates?.timeMs ??\n            limitUrlUpdates?.timeMs ??\n            parser.limitUrlUpdates?.timeMs ??\n            defaultRateLimit.timeMs\n          const debouncedPromise = debounceController.push(\n            update,\n            timeMs,\n            adapter\n          )\n          if (maxDebounceTime < timeMs) {\n            // The largest debounce is likely to be the last URL update,\n            // so we keep that Promise to return it.\n            returnedPromise = debouncedPromise\n            maxDebounceTime = timeMs\n          }\n        } else {\n          const timeMs =\n            callOptions?.limitUrlUpdates?.timeMs ??\n            parser?.limitUrlUpdates?.timeMs ??\n            limitUrlUpdates?.timeMs ??\n            callOptions.throttleMs ??\n            parser.throttleMs ??\n            throttleMs\n          debounceAborts.push(debounceController.abort(urlKey))\n          globalThrottleQueue.push(update, timeMs)\n        }\n      }\n      // We need to flush the throttle queue, but we may have a pending\n      // debounced update that will resolve afterwards.\n      const globalPromise = debounceAborts.reduce(\n        (previous, fn) => fn(previous),\n        globalThrottleQueue.flush(adapter, processUrlSearchParams)\n      )\n      return returnedPromise ?? globalPromise\n    },\n    [\n      stateKeys,\n      history,\n      shallow,\n      scroll,\n      throttleMs,\n      limitUrlUpdates?.method,\n      limitUrlUpdates?.timeMs,\n      startTransition,\n      resolvedUrlKeys,\n      adapter.updateUrl,\n      adapter.getSearchParamsSnapshot,\n      adapter.rateLimitFactor,\n      processUrlSearchParams,\n      defaultValues\n    ]\n  )\n\n  const outputState = useMemo(\n    () => applyDefaultValues(internalState, defaultValues),\n    [internalState, defaultValues]\n  )\n  return [outputState, update]\n}\n\n// --\n\nfunction parseMap<KeyMap extends UseQueryStatesKeysMap>(\n  keyMap: KeyMap,\n  urlKeys: Partial<Record<keyof KeyMap, string>>,\n  searchParams: URLSearchParams,\n  queuedQueries: Record<string, string | null | undefined>,\n  cachedQuery?: Record<string, string | null>,\n  cachedState?: NullableValues<KeyMap>\n): {\n  state: NullableValues<KeyMap>\n  hasChanged: boolean\n} {\n  let hasChanged = false\n  const state = Object.keys(keyMap).reduce((out, stateKey) => {\n    const urlKey = urlKeys?.[stateKey] ?? stateKey\n    const { parse } = keyMap[stateKey]!\n    const queuedQuery = queuedQueries[urlKey]\n    const query =\n      queuedQuery === undefined\n        ? (searchParams?.get(urlKey) ?? null)\n        : queuedQuery\n    if (cachedQuery && cachedState && (cachedQuery[urlKey] ?? null) === query) {\n      // Cache hit\n      out[stateKey as keyof KeyMap] = cachedState[stateKey] ?? null\n      return out\n    }\n    // Cache miss\n    hasChanged = true\n    const value = query === null ? null : safeParse(parse, query, stateKey)\n    out[stateKey as keyof KeyMap] = value ?? null\n    if (cachedQuery) {\n      cachedQuery[urlKey] = query\n    }\n    return out\n  }, {} as NullableValues<KeyMap>)\n\n  if (!hasChanged) {\n    // check that keyMap keys have not changed\n    const keyMapKeys = Object.keys(keyMap)\n    const cachedStateKeys = Object.keys(cachedState ?? {})\n    hasChanged =\n      keyMapKeys.length !== cachedStateKeys.length ||\n      keyMapKeys.some(key => !cachedStateKeys.includes(key))\n  }\n\n  return { state, hasChanged }\n}\n\nfunction applyDefaultValues<KeyMap extends UseQueryStatesKeysMap>(\n  state: NullableValues<KeyMap>,\n  defaults: Partial<Values<KeyMap>>\n) {\n  return Object.fromEntries(\n    Object.keys(state).map(key => [key, state[key] ?? defaults[key] ?? null])\n  ) as Values<KeyMap>\n}\n", "import { useCallback } from 'react'\nimport type { Options } from './defs'\nimport type { Parser } from './parsers'\nimport { useQueryStates } from './useQueryStates'\n\nexport interface UseQueryStateOptions<T> extends Parser<T>, Options {}\n\nexport type UseQueryStateReturn<Parsed, Default> = [\n  Default extends undefined\n    ? Parsed | null // value can't be null if default is specified\n    : Parsed,\n  (\n    value:\n      | null\n      | Parsed\n      | ((\n          old: Default extends Parsed ? Parsed : Parsed | null\n        ) => Parsed | null),\n    options?: Options\n  ) => Promise<URLSearchParams>\n]\n\n// Overload type signatures ----------------------------------------------------\n// Note: the order of declaration matters (from the most specific to the least).\n\n/**\n * React state hook synchronized with a URL query string in Next.js\n *\n * This variant is used when providing a default value. This will make\n * the returned state non-nullable when the query is not present in the URL.\n * (the default value will be returned instead).\n *\n * _Note: the URL will **not** be updated with the default value if the query\n * is missing._\n *\n * Setting the value to `null` will clear the query in the URL, and return\n * the default value as state.\n *\n * Example usage:\n * ```ts\n *   const [count, setCount] = useQueryState(\n *     'count',\n *     parseAsInteger.defaultValue(0)\n *   )\n *\n *   const increment = () => setCount(oldCount => oldCount + 1)\n *   const decrement = () => setCount(oldCount => oldCount - 1)\n *   // Clears the query key from the URL and `count` equals 0\n *   const clearCountQuery = () => setCount(null)\n * ```\n * @param key The URL query string key to bind to\n * @param options - Parser (defines the state data type), default value and optional history mode.\n */\nexport function useQueryState<T>(\n  key: string,\n  options: UseQueryStateOptions<T> & { defaultValue: T }\n): UseQueryStateReturn<\n  NonNullable<ReturnType<typeof options.parse>>,\n  typeof options.defaultValue\n>\n\n/**\n * React state hook synchronized with a URL query string in Next.js\n *\n * If the query is missing in the URL, the state will be `null`.\n *\n * Example usage:\n * ```ts\n *   // Blog posts filtering by tag\n *   const [tag, selectTag] = useQueryState('tag')\n *   const filteredPosts = posts.filter(post => tag ? post.tag === tag : true)\n *   const clearTag = () => selectTag(null)\n * ```\n * @param key The URL query string key to bind to\n * @param options - Parser (defines the state data type), and optional history mode.\n */\nexport function useQueryState<T>(\n  key: string,\n  options: UseQueryStateOptions<T>\n): UseQueryStateReturn<NonNullable<ReturnType<typeof options.parse>>, undefined>\n\n/**\n * Default type string, limited options & default value\n */\nexport function useQueryState(\n  key: string,\n  options: Options & {\n    defaultValue: string\n  } & {\n    // Note: Ensure this overload isn't picked when specifying a default\n    // value and spreading a parser for which the default would be invalid.\n    // See https://github.com/47ng/nuqs/pull/1057\n    [K in keyof Parser<unknown>]?: never\n  }\n): UseQueryStateReturn<string, typeof options.defaultValue>\n\n/**\n * React state hook synchronized with a URL query string in Next.js\n *\n * If the query is missing in the URL, the state will be `null`.\n *\n * Note: by default the state type is a `string`. To use different types,\n * check out the `parseAsXYZ` helpers:\n * ```ts\n *   const [date, setDate] = useQueryState(\n *     'date',\n *     parseAsIsoDateTime.withDefault(new Date('2021-01-01'))\n *   )\n *\n *   const setToNow = () => setDate(new Date())\n *   const addOneHour = () => {\n *     setDate(oldDate => new Date(oldDate.valueOf() + 3600_000))\n *   }\n * ```\n * @param key The URL query string key to bind to\n * @param options - Parser (defines the state data type), and optional history mode.\n */\nexport function useQueryState(\n  key: string,\n  options: Pick<UseQueryStateOptions<string>, keyof Options>\n): UseQueryStateReturn<string, undefined>\n\n/**\n * React state hook synchronized with a URL query string in Next.js\n *\n * If the query is missing in the URL, the state will be `null`.\n *\n * Note: by default the state type is a `string`. To use different types,\n * check out the `parseAsXYZ` helpers:\n * ```ts\n *   const [date, setDate] = useQueryState(\n *     'date',\n *     parseAsIsoDateTime.withDefault(new Date('2021-01-01'))\n *   )\n *\n *   const setToNow = () => setDate(new Date())\n *   const addOneHour = () => {\n *     setDate(oldDate => new Date(oldDate.valueOf() + 3600_000))\n *   }\n * ```\n * @param key The URL query string key to bind to\n */\nexport function useQueryState(\n  key: string\n): UseQueryStateReturn<string, undefined>\n\n/**\n * React state hook synchronized with a URL query string in Next.js\n *\n * If used without a `defaultValue` supplied in the options, and the query is\n * missing in the URL, the state will be `null`.\n *\n * ### Behaviour with default values:\n *\n * _Note: the URL will **not** be updated with the default value if the query\n * is missing._\n *\n * Setting the value to `null` will clear the query in the URL, and return\n * the default value as state.\n *\n * Example usage:\n * ```ts\n *   // Blog posts filtering by tag\n *   const [tag, selectTag] = useQueryState('tag')\n *   const filteredPosts = posts.filter(post => tag ? post.tag === tag : true)\n *   const clearTag = () => selectTag(null)\n *\n *   // With default values\n *\n *   const [count, setCount] = useQueryState(\n *     'count',\n *     parseAsInteger.defaultValue(0)\n *   )\n *\n *   const increment = () => setCount(oldCount => oldCount + 1)\n *   const decrement = () => setCount(oldCount => oldCount - 1)\n *   const clearCountQuery = () => setCount(null)\n *\n *   // --\n *\n *   const [date, setDate] = useQueryState(\n *     'date',\n *     parseAsIsoDateTime.withDefault(new Date('2021-01-01'))\n *   )\n *\n *   const setToNow = () => setDate(new Date())\n *   const addOneHour = () => {\n *     setDate(oldDate => new Date(oldDate.valueOf() + 3600_000))\n *   }\n * ```\n * @param key The URL query string key to bind to\n * @param options - Parser (defines the state data type), optional default value and history mode.\n */\nexport function useQueryState<T = string>(\n  key: string,\n  options: Partial<UseQueryStateOptions<T>> & {\n    defaultValue?: T\n  } = {}\n) {\n  const {\n    parse = x => x as unknown as T,\n    serialize,\n    eq,\n    defaultValue,\n    ...hookOptions\n  } = options\n  const [{ [key]: state }, setState] = useQueryStates(\n    {\n      [key]: {\n        parse,\n        serialize,\n        eq,\n        defaultValue\n      }\n    },\n    hookOptions\n  )\n  const update = useCallback(\n    (stateUpdater: React.SetStateAction<T | null>, callOptions: Options = {}) =>\n      setState(\n        old => ({\n          [key]:\n            typeof stateUpdater === 'function'\n              ? // @ts-expect-error somehow stateUpdater is not narrowed correctly\n                // and useQueryStates' key type is not inferred\n                stateUpdater(old[key])\n              : stateUpdater\n        }),\n        callOptions\n      ),\n    [key, setState]\n  )\n  return [state, update]\n}\n"],
  "mappings": "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",
  "names": ["error", "parseAsString: ParserBuilder<string>", "parseAsInteger: ParserBuilder<number>", "parseAsIndex: ParserBuilder<number>", "parseAsHex: ParserBuilder<number>", "parseAsFloat: ParserBuilder<number>", "parseAsBoolean: ParserBuilder<boolean>", "parseAsTimestamp: ParserBuilder<Date>", "parseAsIsoDateTime: ParserBuilder<Date>", "parseAsIsoDate: ParserBuilder<Date>", "emitter: Emitter<EventMap>", "handlers", "newState: Partial<Nullable<KeyMap>>", "returnedPromise: Promise<URLSearchParams> | undefined", "debounceAborts: Array<\n        (p: Promise<URLSearchParams>) => Promise<URLSearchParams>\n      >", "update: UpdateQueuePushArgs", "startTransition", "update"]
}
